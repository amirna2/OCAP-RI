// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

// List of scripts used by this script
//
this.interpreter.source ("scripts/level1/OcapAppDriverTuningMisc.bsh");
this.interpreter.source ("scripts/level1/TuneToServiceByIndex.bsh");

String tuningPerformance()
{
    static final int NUM_TUNES = 100;
	static final float STD_DEV_ACCEPTANCE = 4.0;
	static final float AVG_TUNE_ACCEPTANCE = 3.5;

    String failureReason = null;
	boolean rc;
	String testName = "tuningPerformance : tuningPerformance()";
	long startTime, elapsedTime;
	float seconds, sumTimes, average, variance, stdDev, tmp;
	Random rand = new Random();
	float[] tuneTimes = new float[NUM_TUNES];
	
	for (int i = 1; i <= NUM_TUNES; i++) {
	    sumTimes = 0;
		stdDev = 0;
		variance = 0;
		tmp = 0;
	    rxLog.info("starting tune # " + i);
	    startTime = System.currentTimeMillis();
		// No. of services hard-coded due to inlcusion of un-tunable channel in channel map
	    rc = tuneToServiceByIndex(rand.nextInt(4), true, 30);
        // Wait for the tuner to go the tuned state.
        if (!rc) {	
            failureReason = "TUNE # " + i + " FAILED!";
            return failureReason;
        } else {
            elapsedTime = System.currentTimeMillis() - startTime;
		    seconds = (float)elapsedTime / 1000;
		    rxLog.info("tune # " + i + " Finished in " + seconds + " seconds");
			rxLog.info("tuned to channel " + rxDriverCore.getServiceIndex());
			tuneTimes[(i-1)] = seconds;
			
			for (float j : tuneTimes) {
			    sumTimes += j;
				tmp += (j*j)/i;
		    }
			
            average = sumTimes/i;
			variance = tmp - (average * average);
			stdDev = (float) Math.sqrt(variance);
			rxLog.info("average tune time = " + average);
			rxLog.info("standard deviation = " + stdDev);
			
        }
    }
	rxLog.info("Final Average Tune Time = " + average);
	rxLog.info("Final Variance = " + variance);
	rxLog.info("Final Standard Deviation = " + stdDev);
	if (stdDev > STD_DEV_ACCEPTANCE) {
	    failureReason = "Standard Deviation was above the acceptable level";
		return failureReason;
    }
	if (stdDev > AVG_TUNE_ACCEPTANCE) {
	    failureReason = "Average tune time was above the acceptable level";
		return failureReason;
    }
	
	rxLog.info(logStr + "Completed " + testName + " - PASS");
    return failureReason;
}
