// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

this.interpreter.source ("scripts/level1/DeleteRecordings.bsh");
this.interpreter.source ("scripts/level1/FindNumRecordingsAndDuration.bsh");
this.interpreter.source ("scripts/level1/TuneToServiceByIndex.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");
this.interpreter.source ("scripts/level1/PublishRecordingToCDS.bsh");

/**
 * Performs setup for recording scenario.
 *
 * @param useExistingRecs   if true, assume a recording exists, 
 *                          if false, delete all and create new one 
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String performRecordingTestSetup(String testName, boolean useExistingRecs)
{
    return performRecordingTestSetup(testName, useExistingRecs, 30, WAIT_FOR_RECORDING_STATE_SECS, false, rxDriverDVR.COMPLETED_STATE);
}

String performRecordingTestSetup(String testName, boolean useExistingRecs, boolean changeChannel)
{
    return performRecordingTestSetup(testName, useExistingRecs, 30, WAIT_FOR_RECORDING_STATE_SECS, changeChannel, rxDriverDVR.COMPLETED_STATE);
}

String performRecordingTestSetup(String testName, boolean useExistingRecs, int recordingLength, int waitTime, boolean changeChannel)
{
    return performRecordingTestSetup(testName, useExistingRecs, recordingLength, waitTime, changeChannel, rxDriverDVR.COMPLETED_STATE);
}

String performRecordingTestSetup(String testName, boolean useExistingRecs, int recordingLength, int waitTime, boolean changeChannel, int recState)
{
    return performRecordingTestSetup(testName, useExistingRecs, recordingLength, waitTime, changeChannel, recState, false);
}

String performRecordingTestSetup(String testName, boolean useExistingRecs, int recordingLength, int waitTime, boolean changeChannel, int recState, boolean backgroundRec)
{
    return performRecordingTestSetup(testName, useExistingRecs, recordingLength, waitTime, changeChannel, recState, backgroundRec, false);
}

String performRecordingTestSetup(String testName, boolean useExistingRecs, int recordingLength, int waitTime, 
                                 boolean changeChannel, int recState, boolean backgroundRec, boolean remoteRecording)
{
    String failureReason = null;
    
    int svcIndex = DROOLING_BABY_CHANNEL_IDX;
    rxLog.info(testName + " - performRecordingTestSetup() - called with use existing? " +
            useExistingRecs + ", length: " + recordingLength + ", wait time: " +
            waitTime + ", change channel? " + changeChannel + ", rec state: " +
            recState + ", background rec? " + backgroundRec);
    
    // Determine if an existing recording should be used
    boolean createRecording = false; 
    if (useExistingRecs)
    {
        // Make sure there is at least one recording
        if (getRecordingCount() <= 0)
        {
            // Set flag to create a recording
            createRecording = true;
        }
    }
    else
    {
        // Not using existing recording, delete all that currently exist
        // deleting the recording also unpublishes if published
        rxLog.info(testName + " - Deleting existing recordings");
        if (!deleteAllRecordings())
        {
            // Problems deleting all recording, fail test and return
            failureReason = "Problems deleting all recordings";
            rxLog.callTrace("Failure during deleteAllRecordings :", this.callstack);
            return failureReason;
        }
        
        // Set flag to create a recording
        createRecording = true;        
    }

    // If need to create a recording, tune and create a 45 second recording for testing
    if (createRecording)
    {
        rxLog.info(testName + " - Tuning to service " + svcIndex);
        if (!tuneToServiceByIndex(svcIndex, true, 45))
        {
            failureReason = "Failure tuning and waiting for tuned state";
            rxLog.callTrace("Failure during tune and wait :", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Success in tuning to service, starting recording");
    
        // Record with Tuner 0 on X secs (recordingLength) in supplied mode (backgroundRec or foregroundRec) 
        // waiting X secs (waitTime) for recording to enter desired state (recState)
        if (!recordContentOnTuner(testName, 0, recordingLength, backgroundRec, waitTime, recState, remoteRecording))
        {
            failureReason = "Failure recording and waiting for completion state";
            rxLog.callTrace("Failure during recording and wait ", this.callstack);
            return failureReason;
        }
        
        if (getRecordingCount() <= 0)
        {
             failureReason = "No Recordings available...";
             rxLog.callTrace("NO recordings are available : ", this.callstack);
             return failureReason;    
        }
        rxLog.info(testName + " - Success in creating a recording");

        // Verify recording length only if this is NOT a segmented recording
        long recDuration = getCurrentRecordingDuration(0);
        rxLog.info(testName + " - recording duration is " +recDuration +" seconds, requested length was " +recordingLength +" seconds");
        
        // OCAP.dvr.recording.tolerance=30000
        int minLength = Math.max(recordingLength - 30, 0);  
        if (recState == rxDriverDVR.COMPLETED_STATE && recDuration < minLength) 
        {
            failureReason = "Incorrect recording length.  Expected recording length to be at least " +minLength +", got " + recDuration;
            rxLog.callTrace("Failure in recording length verification. expected " +recordingLength +"-30, got " + recDuration, this.callstack);
            return failureReason;
        }
        if (recState == rxDriverDVR.COMPLETED_STATE && recDuration > recordingLength)
        {
            failureReason = "Incorrect recording length.  Recording duration (" +recDuration +") exceeds requested legnth of " + recordingLength;
            rxLog.callTrace("Failure in recording length verification.  recording length (" +recDuration+") exceeds requested length of " +recordingLength, this.callstack);
            return failureReason;
        }
        rxLog.info("Verified recording length.");
    }

    // Publish the recording to CDS if newly created
    if (!useExistingRecs)
    {
        rxLog.info(testName + " - Unpublishing existing recordings");
        if (!unPublishAllRecordingsToCDS())
        {
            // Problems unpublishing all recording, fail test and return
            failureReason = "Problems unpublishing all recordings";
            rxLog.callTrace("Failure during unpublishAllRecordingsToCDS :", this.callstack);
            return failureReason;            
        }
        if (!publishRecordingToCDS(0))
        {
            failureReason = "Failed to publish recording 0 to local CDS";
            rxLog.callTrace("Failure during publish to local CDS: ", this.callstack);
            return failureReason;                
        }  
        rxLog.info(testName + " - Successfully published recording to local CDS");
    }

    // tune to a second channel (CHANNEL_UP)
    if (changeChannel)
    {
        svcIndex++;
        if (!tuneToServiceByIndex(svcIndex, true, 45))
        {
            failureReason = "Failure second tuning and waiting for tuned state";
            rxLog.callTrace("Failure second tuning and waiting for tuned state ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Success in tuning to second channel :" + svcIndex);
    }

    return failureReason;
}
