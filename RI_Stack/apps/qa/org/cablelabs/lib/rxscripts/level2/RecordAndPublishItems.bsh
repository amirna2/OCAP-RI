// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Purpose: This level 2 script records and publishes multiple recording content items.
// Passing criteria for this script is all RecordingContentItems are published without
// any errors.
// Test Steps:
// a. Create a specified number of 10-second recordings
// b. Once all recordings have completed, publish them all
// b. Return results
// 
///////////////////////////////////////////////////////////////////////////////

// List of scripts used by this script
//
this.interpreter.source ("scripts/level1/TuneToServiceByIndex.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");
this.interpreter.source ("scripts/level1/PublishRecordingToCDS.bsh");
this.interpreter.source ("scripts/level1/FindNumRecordingsAndDuration.bsh");
this.interpreter.source ("scripts/level1/DeleteRecordings.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");

/**
 * Main method to create and publish recordings
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String recordAndPublishItems(int recordingsToPublish, boolean remoteRecording)
{
    String failureReason = null;
    String testName = "recordAndPublishItems";
    int recLengthSecs = 10;
    
    deleteAllRecordings();
    
    // Tune to a Service before making a recording
    rxLog.info(testName + " - Tuning to service " + svcIndex);
    if (!tuneToServiceByIndex(DROOLING_BABY_CHANNEL_IDX, true, 45))
    {
        failureReason = "Failure tuning and waiting for tuned state";
        rxLog.callTrace("Failure during tune and wait :", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Success in tuning to service, starting recording");
    for (int i = 0; i < recordingsToPublish; i++)
    {
        // Make a recording of recLengthSecs on tuner 0 and wait for COMPLETED_STATE
        if (!recordContentOnTuner(testName, 0, recLengthSecs, false, recLengthSecs + TOLERANCE_SECS, rxDriverDVR.COMPLETED_STATE, remoteRecording))
        {
            failureReason = "Failure recording and waiting for completion state";
            rxLog.callTrace("Failure during recording and wait ", this.callstack);
            return failureReason;
        }

        rxLog.info(testName + " - Success in creating recording and publishing" + i);
    }

	if (remoteRecording)
	{
		if (!publishAllRecordingsToCDS())
		{
			failureReason = "Failed to publish all recordings to local CDS";
			rxLog.callTrace("Failure during publish to local CDS : ", this.callstack);
			stopPlayback();
			return failureReason;                
		}
	}
	else
	{
	    if (!publishAllRecordingsToCDS())
		{
			failureReason = "Failed to publish all recordings to local CDS";
			rxLog.callTrace("Failure during publish to local CDS : ", this.callstack);
			stopPlayback();
			return failureReason;                
		}
	}

     
    rxLog.info(testName + " - Successfully published all recordings to local CDS");  
    stopPlayback();
    return failureReason;
}
