// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

this.interpreter.source ("scripts/level1/RemoteUIServerClient.bsh");

String RemoteUIServerManager40() 
{
    rxLog.info ("In RemoteUIServerManager40 ");    
    String failureReason = null;
    String XMLDescription = null;
    String inputDeviceProfile = null;
    String optionalElement = null;
    String uIFilter = null;
    String retXML = null;
    int init = 0;
 
    /*
    Examples taken from UPnP-rui-RemoteUIServer-v1-Service-20040902
    See section 3.1.2 for definitions of UIs
    See section 3.1.3 for filtering remoting protocols
    See section 3.1.5 for UIFilter examples
    */ 

    XMLDescription = getXML("MANY_RUI_LIST");
    setUIList(XMLDescription);

    // Hack to wait instead of being event driven
    Thread.sleep (15000);
    int init = rxDriverHN.getUpnpRuiServerIndexByName("RemoteUI Server");

    /*
    Subtest 1: Select only a subset of the UIs in the server.
    Selection is based on the shortName 
    */
    uIFilter = "";
    inputDeviceProfile = "<deviceprofile xmlns=\"urn:schemas-upnp-org:remoteui:devprofile-1-0\""  
           + " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
           + " xsi:schemaLocation=\"urn:schemas-upnp-org:remoteui:devprofile-1-0 DeviceProfile.xsd\">" 
           + "<protocol shortName=\"DLNA-HTML5-1.0\"/>" 
           + "</deviceprofile>"; 
    String retXml = invokeRuissGetCompatibleUIs(init, inputDeviceProfile, uIFilter );
    if (!(retXml.indexOf("DLNA-HTML5-1.0") > 0))	
    {
    	failureReason = " shortName DLNA-HTML5-1.0 not found in the returned xml: " + retXml;	   	        
    }
    if (retXml.indexOf("XRT2") > 0)	
    {
    	failureReason = " shortName XRT2 not expected in the returned xml: " + retXml;	   	        
    }

    /*
    Subtest 2: Obtain information on optional elements using the UIFIlter
    Note that the filter in no way determines which UIs are presented, rather
    it only determines which optional elements to present.
    */
    inputDeviceProfile = "";
    uIFilter = "fork=true";
    String retXml = invokeRuissGetCompatibleUIs(init, inputDeviceProfile, uIFilter );
    optionalElement = "fork";
    if (!hasElement(retXml, optionalElement))	
    {
    	failureReason = "<" + optionalElement + "> element not found in the returned xml: " + retXml; 
    }

    /*
    Subtest 3: Obtain information on optional elements using the UIFIlter (negative test)
    Since there are no UIs where fork=false, that element should not be presented in the returned XML.
    */
    inputDeviceProfile = "";
    uIFilter = "fork=false";
    String retXml = invokeRuissGetCompatibleUIs(init, inputDeviceProfile, uIFilter );
    optionalElement = "fork";
    if (hasElement(retXml, optionalElement))	
    {
    	failureReason = "<" + optionalElement + "> element found in the returned xml: " + retXml; 
    }

    /*
    Subtest 4: Filter on more than one optional element.
    Element filters are separated by commas.  Do not include spaces.
    Only exact matches and the asterisk wild card are supported.  
    General regular expressions are not supported.
    */ 
    inputDeviceProfile = "";
    uIFilter = "fork=true,description=\"*\"";
    String retXml = invokeRuissGetCompatibleUIs(init, inputDeviceProfile, uIFilter );
    optionalElement = "fork";
    if (!hasElement(retXml, optionalElement))	
    {
    	failureReason = "<" + optionalElement + "> element not found when multiple elements: " + retXml; 
    }
    optionalElement = "description";
    if (!hasElement(retXml, optionalElement))	
    {
    	failureReason = "<" + optionalElement + "> element not found when multiple elements: " + retXml; 
    }


    rxLog.info("Completed RemoteUIServerManager-40 : " + failureReason);
        
    return failureReason;
}
