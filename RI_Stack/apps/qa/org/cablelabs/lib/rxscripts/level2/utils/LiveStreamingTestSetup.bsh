// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

this.interpreter.source ("scripts/level1/TuneToServiceByIndex.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");
this.interpreter.source ("scripts/level1/PublishLiveChannelToCDS.bsh");

/**
 * THIS TEST REQUIRES TWO TUNERS IF THERE IS A CHANNEL CHANGE
 * Performs setup for live streaming playback scenario.
 * 
 * @param changeChannel   if true, the channel has to be changed after publishing the current channel, 
 *                        if false, the channel will not be changed after publishing the current channel
 * @param channelIndex   index of the channel to publish
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String performLiveStreamingSetup(boolean changeChannel, int channelIndex, boolean doSegment)
{
    String failureReason = null;
    int channelIndexToPublish = channelIndex;
    /* Used when using HDHomerun*/
    //int channelIndexToPublish = 84;
    int secondChannelIndex = DROOLING_BABY_CHANNEL_IDX;
    /* Used when using HDHomerun*/
    //int secondChannelIndex = 67;
    int tunerIndex = 0;
    if(!tuneToServiceByIndex(channelIndexToPublish,true,45))
    {
        failureReason = "Failure tuning and waiting for tuned state";
        return failureReason;
    }
    rxLog.info("Success in tuning to first channel :"+channelIndexToPublish);
    
    // Publish the channel to CDS.
    if(!publishChannelToCDS(channelIndexToPublish))
    {
        failureReason = "Failure publish channel to CDS";
        return failureReason;
    }
    rxLog.info("Successfully published the current channel :"+channelIndexToPublish);
    
    // If segment live stream requested
    if (doSegment)
    {
        Thread.sleep(30000); //wait 30 secs before unsync tuner 

        rxLog.info(testName + "  performLiveStreamingSetup() - unsyncing tuner to create first segment"); 
        if (!rxDriverCore.setTunerSyncState(tunerIndex, false))
        {
            rxLog.info(testName + "  performLiveStreamingSetup() - Failed to unsync tuner");
            returnValue = false;
            return returnValue;
        }
        rxLog.info(testName + "  performLiveStreamingSetup() - successfully unsynced tuner, creating 15 sec missing segment"); 
        Thread.sleep(15000); //wait 15 sec before sync tuner again to create 15 sec missing segment
        
        rxLog.info(testName + "  performLiveStreamingSetup() - syncing tuner after first segment to resume streaming");             
        if (!rxDriverCore.setTunerSyncState(tunerIndex, true))
        {
            rxLog.info(testName + "  performLiveStreamingSetup() - Failed to sync tuner");
            returnValue = false;
            return returnValue;
        }
        rxLog.info(testName + "  performLiveStreamingSetup() - successfully synced tuner");        
    }
    
    // Tune to a different channel.
    if(changeChannel)
    {
        if(!tuneToServiceByIndex(secondChannelIndex,true,45))
        {
            failureReason = "Failure tuning channel after publishing and waiting for tuned state";
            return failureReason;
        }
        rxLog.info("Success in tuning to second channel :"+secondChannelIndex);
    }
    return failureReason;
}

/**
 * THIS TEST REQUIRES TWO TUNERS IF THERE IS A CHANNEL CHANGE
 * Performs setup for live streaming playback scenario.
 * Sets up ChannelContentItem with AlternateURI metadata 
 * 
 * @param changeChannel   if true, the channel has to be changed after publishing the current channel, 
 *                        if false, the channel will not be changed after publishing the current channel
 * @param channelIndex   index of the channel to publish
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String performLiveStreamingSetupWithAltURI(boolean changeChannel, int channelIndex)
{
    String failureReason = null;
    int channelIndexToPublish = channelIndex;
    /* Used when using HDHomerun*/
    //int channelIndexToPublish = 84;
    int secondChannelIndex = DROOLING_BABY_CHANNEL_IDX;
    /* Used when using HDHomerun*/
    //int secondChannelIndex = 67;
    if(!tuneToServiceByIndex(channelIndexToPublish,true,45))
    {
        failureReason = "Failure tuning and waiting for tuned state";
        return failureReason;
    }
    rxLog.info("Success in tuning to first channel :"+channelIndexToPublish);
    
    // Publish the channel to CDS.
    if(!publishChannelToCDSWithAltURI(channelIndexToPublish))
    {
        failureReason = "Failure publish channel to CDS";
        return failureReason;
    }
    rxLog.info("Successfully published the current channel :"+channelIndexToPublish);

    // Tune to a different channel.
    if(changeChannel)
    {
        if(!tuneToServiceByIndex(secondChannelIndex,true,45))
        {
            failureReason = "Failure tuning channel after publishing and waiting for tuned state";
            return failureReason;
        }
        rxLog.info("Success in tuning to second channel :"+secondChannelIndex);
    }
    return failureReason;
}


