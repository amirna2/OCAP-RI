// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Test cases covered: Simple Recording 40
// Purse: This level 2 script performs the completed segmented recording
// scenario which is as follows:
// Test Setup:
// a. Create a segmented recording
// b. Publish to CDS
// c. Start RemoteService playback
//
// Test Steps:
// 1. Test setup:
//    i.  create a 5 minute (segmented) recording.
//    ii. publish segmented recording in CDS.
// 2. Get local media server.
// 3. Begin playback. 
// 4. Stop playback.
// 
///////////////////////////////////////////////////////////////////////////////

// List of scripts used by this script
//
this.interpreter.source ("scripts/level2/utils/RecordingTestSetup.bsh");
this.interpreter.source ("scripts/level2/HN/RemoteService/SimpleTrick-40.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");

/**
 * Main method to perform completed non-segmented recording scenario.
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String simpleRecording40(boolean useRemoteService, boolean dvrPlayback, int desiredRecState, 
                         int recLengthSecs, int playDurationSecs)
{
    String failureReason = null;
    String testName = "simpleRecording40";
    boolean useExistingRecs = false;
    boolean changeChannel = false;
    
    // If this is a "inprogress" recording test, need to create a background recording
    // in order to properly play it back
    String results = null;
    if ((desiredRecState == rxDriverDVR.IN_PROGRESS_INCOMPLETE_STATE) ||
        (desiredRecState == rxDriverDVR.IN_PROGRESS_STATE))
    {
        // Create background recordings for inprogress tests
        results = performRecordingTestSetup(testName, useExistingRecs, recLengthSecs, 
                      recLengthSecs + TOLERANCE_SECS, changeChannel, desiredRecState, true);        
    }
    else
    {
        results = performRecordingTestSetup(testName, useExistingRecs, recLengthSecs, 
                recLengthSecs + TOLERANCE_SECS, changeChannel, desiredRecState);
        
    }
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace ("Failure performing recording setup : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Completed Test setup for playback");
    
    int sysStartTimeSecs = (System.currentTimeMillis() / 1000);
    rxLog.info(testName +" - system time at time of recording start is " + startTime);
    
    if (dvrPlayback)
    {
        if (!startPlayback())
        {
            failureReason = "Problems setting up player for content";
            rxLog.callTrace ("Failure setting up player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Created and started DVR playback");
    }
    else
    {
        // Find the index of the local media server
        int mediaServerIndex = findLocalMediaServer();
        if(mediaServerIndex == -1)
        {
            failureReason = "Problems getting local media server";
            rxLog.callTrace ("Failure getting media server : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Found local media server");

        // Get the content item index of first and only recording
        int recContentItem = getContentItemIndexOfFirstRecording(mediaServerIndex);
        if (recContentItem == -1)
        {
            failureReason = "Problems getting recording content item";
            rxLog.callTrace ("Failure getting recording content item : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Found recording content item to playback");
        
        // Stop broadcast service selection so video device is available for playback
        tuneToServiceStop();                    

        // Create and start HNPlayer to play the recording created during setup
        if (!startHNPlayback(useRemoteService,mediaServerIndex,recContentItem))
        {
            failureReason = "Problems setting up player for content";
            rxLog.callTrace ("Failure setting up player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Created and started HN playback");

        // Get time at which HN playback starts
        sysStartTimeSecs = (int)(System.currentTimeMillis() / 1000);
        rxLog.info(testName +" - system time of HN playback start is " + startTime + " seconds");
    }
    
    if (desiredRecState == rxDriverDVR.INCOMPLETE_STATE ||
        desiredRecState == rxDriverDVR.IN_PROGRESS_INCOMPLETE_STATE)
    {
        // Adjust length by 15 seconds due to segmentation
        playDurationSecs -= 15;
    }
    
    failureReason = st40_subtest1(
                        testName,           // used in log msgs
                        desiredRecState,    // state of recording
                        sysStartTimeSecs,   // Used to calc duration of INPROGRESS rec
                        TOLERANCE_SECS,     // allowed tolerance
                        playDurationSecs,   // recording length in secs
                        useRemoteService);  // use playback duration of player instead 
                                            // of recording duration
                                  
    if (failureReason == null)
    {
        rxLog.info(testName + " - Completed playback and EOS media time is correct");
    }
    stopPlayback();
    return failureReason;
}
