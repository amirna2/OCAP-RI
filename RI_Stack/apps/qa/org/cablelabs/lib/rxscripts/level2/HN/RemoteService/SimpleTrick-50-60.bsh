// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Purpose: This level 2 script performs the recording scenario as follows
// Test Setup:
// a. Create a recording
//        i.  simpleRecording-50 creates a segmented recording
//        ii. simpleRecording-60 creates an IN_PROGRESS recording
// b. Publish to CDS if using HN playback, otherwise use DVR playback
// c. Start playback
//
// Test Steps:
// 1. Start playback, verifies starts at beginning, play to EOS
// 2. Rewind to beginning, verify BOS is received
// 3. Begin playback at 1x, play for at least 10 seconds, pause
// 4. Rewind to BOS, when BOS is reached, fast forward  
// 5. Fast forward until EOS, is reached, rewind for at least 10 seconds
// 6. Stop playback, verifies returns to DvrExerciser menu
//
///////////////////////////////////////////////////////////////////////////////
 
// List of scripts used by this script
//
this.interpreter.source ("scripts/level2/HN/RemoteService/SimpleTrick-40.bsh");
this.interpreter.source ("scripts/level2/utils/PlayerRateChangeUtil.bsh");
this.interpreter.source ("scripts/level2/utils/RecordingTestSetup.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");
this.interpreter.source ("scripts/level1/PublishRecordingToCDS.bsh");

/**
 * Main method to perform completed non-segmented recording scenario.
 *
 * @param useExistingRecs   if true, assume a recording exists, 
 *                          if false, delete all and create new one 
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String simpleTrick5060(boolean useRemoteService, boolean dvrPlayback, int recState, int toleranceSecs)
{
    String failureReason = null;

    String testName = "simpleTrick60";
    if (recState == rxDriverDVR.INCOMPLETE_STATE)
    {
        testName = "simpleTrick50";
    }
    rxLog.info(testName +" - Starting Test setup");

    int recLengthSecs = 180;   
    
    // Create new recording waiting max of X secs to enter either 
    // completed or incomplete rec state without changing channel 
    // (x is config param rxDriver.wait_for_recording_state_secs, default 30 secs)
    String results;
    
    // If this is a "inprogress" recording test, need to create a background recording
    // in order to properly play it back
    if (recState == rxDriverDVR.IN_PROGRESS_STATE || 
        recState == rxDriverDVR.IN_PROGRESS_INCOMPLETE_STATE)
    {
        results = performRecordingTestSetup
                (testName,                      // The script name 
                false,                          // Don't use existing recordings
                recLengthSecs,                  // The length of the recording
                recLengthSecs + toleranceSecs, // The amount of time to reach the desired state
                false,                          // Don't change the channel
                recState,                       // The recording state to wait for
                true);                          // Make a background recording
    }
    else
    {
        results = performRecordingTestSetup
                (testName,                      // The script name 
                false,                          // Don't use existing recordings
                recLengthSecs,                  // The length of the recording
                recLengthSecs + toleranceSecs, // The amount of time to reach the desired state
                false,                          // Don't change the channel
                recState);                      // The recording state to wait for
    }
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace("Failure performing recording setup : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName +" - Completed Test setup for playback");
    
    if (dvrPlayback)
    {
        if (!startPlayback())
        {
            failureReason = "Problems setting up player for content";
            rxLog.callTrace ("Failure setting up player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Created and started DVR playback");
    }   
    
    else
    {
        // Perform test, start playback passing -1 to indicate no duration requested, 
        // play to end of content
        // Find the index of the local media server
        int mediaServerIndex = findLocalMediaServer();
        if (mediaServerIndex == -1)
        {
            failureReason = "Problems getting local media server";
            rxLog.callTrace("Failure getting media server : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName +" - Found local media server index: " + mediaServerIndex);
    
        // Get the content item index of first and only recording
        int recContentItem = getContentItemIndexOfFirstRecording(mediaServerIndex);
        if(recContentItem == -1)
        {
            failureReason = "Problems getting recording content item";
            rxLog.callTrace ("Failure getting recording content item : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + "Found recording content item to playback");
    
        // Stop broadcast service selection so video device is available for playback        
        tuneToServiceStop();                            

        // Create and start HNPlayer to play the 0th content created using the performSetu+p step
        if (!startHNPlayback(useRemoteService, mediaServerIndex, recContentItem))
        {
            failureReason = "Problems setting up remote player for content";
            rxLog.callTrace("Failure setting up remote player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Created and start Remote player");
    }    

    int sysStartTimeSecs = (System.currentTimeMillis() / 1000);
    rxLog.info(testName +" - system time at start of hn playback is "+ sysStartTimeSecs + " seconds");
    
    // If this is a segmented recording, the rec length will be 15 secs less
    int playDurationSecs = recLengthSecs;
    if (recState == rxDriverDVR.INCOMPLETE_STATE ||
        recState == rxDriverDVR.IN_PROGRESS_INCOMPLETE_STATE)
    {
        // Adjust length by 15 seconds due to segmentation
        playDurationSecs -= 15;
    }
    
    // Perform st5060_subtest 1 - playback in 1x entire item and verify EOS
    failureReason = st40_subtest1(testName, recState, sysStartTimeSecs, toleranceSecs, 
                                  playDurationSecs, useRemoteService);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during st40_subtest1", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - st40_subtest 1 completed");    
    
    // Perform st5060_subtest 2 - Rewind, fast fwd, pause, rewind, fast fwd etc.
    failureReason = st40_subtest2(testName, toleranceSecs, playDurationSecs, useRemoteService);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during st40_subtest2", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - st40_subtest 2 completed");    
    stopPlayback();
    rxLog.info(testName + " - Completed");
    return failureReason;
}