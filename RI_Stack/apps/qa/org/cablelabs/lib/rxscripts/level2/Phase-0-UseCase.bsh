// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Purpose: This level 2 script calls the necessary scripts to perform the RxProject
//          Phase 0 Proof Of Concept Use case which is as follows:
//          1. Tune
//          2. Make a 30 sec recording
//          3. Publish recording to CDS
//          4. Playback the remote recording
//
///////////////////////////////////////////////////////////////////////////////

this.interpreter.source ("scripts/level2/utils/RecordingTestSetup.bsh");
this.interpreter.source ("scripts/level1/TuneToServiceByIndex.bsh");
this.interpreter.source ("scripts/level1/RecordTunerContent.bsh");
this.interpreter.source ("scripts/level1/FindNumRecordingsAndDuration.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/PublishRecordingToCDS.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/DeleteRecordings.bsh");

String phase0UseCase()
{
    String failureReason = null;
    String LOG_PREFIX = "phase0UseCase() - ";
    String result = null;
    
    // Recording setup step
    String results = performRecordingTestSetup(LOG_PREFIX, false,30,35,true);
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace ("Failure performing Recording setup for Phase 0 use case: ", this.callstack);
        return failureReason;
    }
    rxLog.info("Completed Recording setup for Phase 0 use case");
    
    rxLog.info("Total number of recordings available before playback :"+getRecordingCount());

    // Start the playback 
    if(!startPlayback())
    {
        failureReason = "Problems starting the player";
        rxLog.callTrace ("Failure starting the player : ", this.callstack);
        return failureReason;
    }
    rxLog.info("Started DVR player");
    
    // Wait for 10 secs and stop the playback of the live stream
    if(!waitForSecs(10))
    {
        failureReason = "Problems waiting for the DVR playback to complete";
        rxLog.callTrace ("Failure waiting for the DVR playback to complete for 10 secs ", this.callstack);
    }
    else
    {
        rxLog.info("After waiting for 10 secs");
    }
    stopPlayback();
    rxLog.info("Successfully stopped DVR playback");

    // Create and start HNPlayer to play the 0th content created using the performSetup step
    int mediaServerIndex = findLocalMediaServer();
    if (mediaServerIndex == -1)
    {
        failureReason = "Problems getting local media server";
        rxLog.callTrace ("Failure getting media server : ", this.callstack);
        return failureReason;
    }
    rxLog.info("Found local media server");

    // Get the content item index of first and only recording
    int recContentItem = getContentItemIndexOfFirstRecording(mediaServerIndex);
    if (recContentItem == -1)
    {
        failureReason = "Problems getting recording content item";
        rxLog.callTrace ("Failure getting recording content item : ", this.callstack);
        return failureReason;
    }
    rxLog.info("Found recording content item to playback");
    
    if (!startHNPlayback(true, mediaServerIndex, recContentItem))
    {
        failureReason = "Problems setting up remote player for content";
        rxLog.callTrace ("Failure setting up remote player : ", this.callstack);
        return failureReason;
    }
    rxLog.info("Created Remote player");

    // Wait for 10 secs and stop the playback of the live stream
    if(!waitForSecs(10))
    {
        failureReason = "Problems waiting for the DVR playback to complete";
        rxLog.callTrace ("Failure waiting for the DVR playback to complete for 10 secs ", this.callstack);
    }
    else
    {
        rxLog.info("After waiting for 10 secs");
    }
    stopPlayback();

    if(!deleteAllRecordings())
    {
        failureReason = "Problems deleting all recordings";
        rxLog.callTrace ("Failure to delete all recordings", this.callstack);
        return failureReason;
    }
    
    return failureReason;
}
