// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Test cases covered : Simple Live Stream 10.
// Purpose: This level 2 script performs the live streaming playback
// scenario which is as follows:
// Test Setup
// a. Tune to a channel
// b. Publish to CDS
// 
//
// Test Steps:
// 1. Test setup
// 2. Select the media server.
// 3. Select the published channel content item  
// 4. Playback the channel.
//
//
///////////////////////////////////////////////////////////////////////////////
 
// List of scripts used by this script
//
this.interpreter.source ("scripts/level2/utils/LiveStreamingTestSetup.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/PublishLiveChannelToCDS.bsh");

/**
 * Main method to perform live streaming playback scenario.
 *
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */
String simpleLiveStreaming10(boolean useRemoteService, boolean changeChannel, boolean doSegment)
{
    String failureReason = null;
    
    String results = performLiveStreamingSetup(changeChannel, GOLF_CHANNEL_IDX, doSegment);
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace ("Failure performing LiveStreaming setup : ", this.callstack);
        return failureReason;
    }
    rxLog.info("Completed Test setup for live streaming");
    
    // Perform test, start playback passing -1 to indicate no duration requested, 
    // play to end of content
    // Find the index of the local media server
    int mediaPlayerIndex = findLocalMediaServer();
/*
    int mediaPlayerIndex = findRemoteMediaServer(SERVER_NAME);
*/
    if(mediaPlayerIndex == -1)
    {
        failureReason = "Problems getting remote media server: "+serverName;
        rxLog.callTrace ("Failure getting media server named " +serverName +": ", this.callstack);
        return failureReason;
    }
    
    rxLog.info("Found media server: "+serverName);
    
    int channelItemIndex = getPublishedChannelItemByName(mediaPlayerIndex, CHANNEL_NAME_1);
    
    if(channelItemIndex == -1)
    {
        failureReason = "Problems getting index for the published channel item.";
        rxLog.info("Problems getting index for the published channel item.");
        return failureReason;
    }
    rxLog.info("Got Index for the published channel item" +channelItemIndex);
    
    // Stop broadcast service selection so video device is available for playback
    tuneToServiceStop();        
    
    // Create HNPlayer to play the 0th content created using the performSetup step
    if (!startHNPlayback(useRemoteService,mediaPlayerIndex,channelItemIndex))
    {
        failureReason = "Problems setting up remote player for content";
        rxLog.callTrace ("Failure setting up remote player", this.callstack);
        return failureReason;
    }
    rxLog.info("Created and started Remote player");
    
    // Wait for 30 secs and stop the playback of the live stream
    if(!waitForSecs(30))
    {
        failureReason = "Problems waiting for the playback to complete";
        rxLog.callTrace ("Failure waiting for the playback to complete for 30 secs ", this.callstack);
        stopPlayback();
        return failureReason;    
    }
    stopPlayback();
    return failureReason;
}
