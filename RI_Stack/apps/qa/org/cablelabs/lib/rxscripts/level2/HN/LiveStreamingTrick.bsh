// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////

// List of scripts used by this script
this.interpreter.source ("scripts/level2/utils/LiveStreamingTestSetup.bsh");
this.interpreter.source ("scripts/level2/utils/PlayerRateChangeUtil.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/PublishLiveChannelToCDS.bsh");
 
String lst10_subtest1()
{
    String failureReason = null;

    rxLog.info("lst10_subtest1 - started");

    // Wait for 15 secs of normal playback. EOS should not be received.
    if (waitForEOS(15))
    {
        failureReason = "Failure - Received unexpected playback event: PLAYER_CONTROLLER_END_OF_CONTENT";
        rxLog.callTrace ("Failure - Received unexpected PLAYER_CONTROLLER_END_OF_CONTENT: ", this.callstack);
        return failureReason;
    }
    rxLog.info("Did not receive EOS as expected");

    return failureReason;
}

String lst10_subtest2(int toleranceSecs)
{
    String failureReason = null;
    String testName = "lst10_subtest2";

    rxLog.info(testName + " - started");
    
    // Rewind in 2x till BOS
    if ((failureReason = rewindToBOS(testName, (float)-2.0, toleranceSecs * 2))!= null)
    {
        rxLog.callTrace(testName + " - Failure during rewind to reach BOS : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback rewind to BOS complete");
        
    // Play in 1x for 10 secs
    if ((failureReason = playToMediaTime(testName, (float)1.0, 10, toleranceSecs))!= null)
    {
        rxLog.callTrace(testName + " - Failure during play 1x for 10 secs : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback at 1x for 10 secs complete");
    
    // Pause the playback of the livestream
    if ((failureReason = rateChangeHelper(testName, (float)0.0)) != null)
    {
        rxLog.callTrace(testName + " - Failure during pause of livestream: ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback paused");
    
    // Rewind in 2x till BOS
    if ((failureReason = rewindToBOS(testName, (float)-2.0, toleranceSecs * 2))!= null)
    {
        rxLog.callTrace(testName + " - Failure during rewind to reach BOS : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback 2x rewind to BOS complete");
    
    //FF till EOS in 2.0x mode
    // *TODO* - OCORI-4022 - need to get playback length from HTTP response
    int playbackLengthSecs = 120;
    if ((failureReason = fwdToEOS(testName, (float)2.0, playbackLengthSecs, toleranceSecs * 2))!= null)
    {
        rxLog.callTrace(testName + " - Failure during wait for EOS during FF at 2x :", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback 2x fast fwd to EOS complete");
    
    // Rewind in 2x for 10 secs
    if ((failureReason = playToMediaTime(testName, (float)-2.0, 10, toleranceSecs * 2))!= null)
    {
        rxLog.callTrace(testName + " - Failure during 2x and wait for 10 secs:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback 2x rewind for 10 secs complete");
    
    // Pause the playback of the livestream
    if ((failureReason = rateChangeHelper(testName, (float)0.0)) != null)
    {
        rxLog.callTrace(testName + " - Failure during pause of live playback:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback paused");
    
    rxLog.info(testName + " - Completed");
    
    return failureReason;
}

String lst10_subtest3(int toleranceSecs)
{
    String failureReason = null;
    String testName = "lst10_subtest3";
    rxLog.info(testName + " - started");
        
    // Rewind in 4x till BOS
    if ((failureReason = rewindToBOS(testName, (float)-4.0, toleranceSecs * 4))!= null)
    {
        rxLog.callTrace(testName + " - Failure during rewind to BOS in -4x mode:", this.callstack);
        return failureReason;
    }
    
    //FF in 4x till EOS.
    // *TODO* - OCORI-4022 - need to get duration from HTTP response
    // Guess at the value now
    int playbackLengthSecs = 180;
    if ((failureReason = fwdToEOS(testName, (float)4.0, playbackLengthSecs, toleranceSecs * 4))!= null)
    {
        rxLog.callTrace(testName + " - Failure during FF 4x mode and waiting for EOS:", this.callstack);
        return failureReason;
    }
    
    rxLog.info(testName + " - Completed");
    return failureReason;
}

String lst10_subtest4(int toleranceSecs)
{
    String failureReason = null;
    String testName = "lst10_subtest4";
    rxLog.info(testName + " - started");
        
    // Rewind in 4x till BOS
    if ((failureReason = rewindToBOS(testName, (float)-4.0, toleranceSecs * 4))!= null)
    {
        rxLog.callTrace(testName + " - Failure during rewind to BOS in -4x mode:", this.callstack);
        return failureReason;
    }
    
    // Play in 1x for 30 secs
    if ((failureReason = playToMediaTime(testName, (float)1.0, 30, toleranceSecs))!= null)
    {
        rxLog.callTrace(testName + " - Failure during play in 1x mode for 30 secs:", this.callstack);
        return failureReason;
    }
    
    // Pause the playback of the livestream
    if ((failureReason = rateChangeHelper(testName, (float)0.0)) != null)
    {
        rxLog.callTrace(testName + " - Failure during pause of live stream:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback paused");
    
    // Rewind in 8x for 3 secs
    if ((failureReason = playToMediaTime(testName, (float)-8.0, 3, toleranceSecs * 8))!= null)
    {
        rxLog.callTrace(testName + " - Failure during rewind in 8x and wait for 3 secs:", this.callstack);
        return failureReason;
    }
    
    // Pause the playback of the livestream
    if ((failureReason = rateChangeHelper(testName, (float)0.0)) != null)
    {
        rxLog.callTrace(testName + " - Failure during pause of live stream:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback paused");
    
    // Play in 1x for 10 secs
    if ((failureReason = playToMediaTime(testName, (float)1.0, 10, toleranceSecs))!= null)
    {
        rxLog.callTrace(testName + " - Failure during play in 1x mode for 10 secs:", this.callstack);
        return failureReason;
    }
    
    //FF till EOS in 8x mode
    // *TODO* - OCORI-4022 - need to get duration from HTTP response
    // Guess at the value now
    int playbackLengthSecs = 360;
    if ((failureReason = fwdToEOS(testName, (float)8.0, playbackLengthSecs, toleranceSecs * 8))!= null)
    {
        rxLog.callTrace(testName + " - Failure during FF in 8x mode and wait for EOS:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Completed");
    return failureReason;
}

String lst10_subtest5(int toleranceSecs)
{
    String failureReason = null;
    String testName = "lst10_subtest5";

    rxLog.info(testName + " - started");

    // Set playback rate to -2.0 index and wait for 30 secs
    if ((failureReason = playToMediaTime(testName, (float)-2.0, 30, toleranceSecs * 2))!=null)
    {
        rxLog.callTrace(testName + " - Failure during Rew -2x mode and wait for 30 secs:", this.callstack);
        return failureReason;
    }
    
    // FF in 16.0 x mode till EOS
    // *TODO* - OCORI-4022 - need to get duration from HTTP response
    // Guess at the value now
    int playbackLengthSecs = 420;
    if ((failureReason = fwdToEOS(testName, (float)16.0, playbackLengthSecs, toleranceSecs * 16))!= null)
    {
        rxLog.callTrace(testName + " - Failure during FF in 2x mode and wait for EOS:", this.callstack);
        return failureReason;
    }
    
    // Set playback rate to 1x, 9 == 1.0 index
    if ((failureReason = rateChangeHelper(testName, (float)1.0)) != null)
    {
        rxLog.callTrace("lst10_subtest5 - Failure during play in 1x mode:", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Playback at 1.0 has started");
    //TODO: have to implement live point mediatime testing OCORI-4022
    
    rxLog.info(testName + " - Completed");
    return failureReason;
}

 /**
 * Main method to perform completed non-segmented live streaming scenario.
 *
 * @param changeChannel   if true, to change the channel after publishing the current channel using the same RI.
 * @param channelToPlayback channel number to use when publishing from the same RI setup, else -1
 *
 * @param useRemotePlayer  if true, then use Remote player playback if not JMF playback
 * @param localMediaServer if true then locally published channel will be used for playback
 * @param remoteMediaServerName if any remote mediaserver has to be used for getting content, else "".
 * @param channelName if remote server is used then use channelName to find the content, else "".
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 * NOTE: 1. changeChannel,channelToPlayback is useful only when local publish/playback occurs.
 *       2. remoteMediaServerName, channelName is useful only when playing published content from remote media server
 */
String liveStreamingTrick(boolean changeChannel,int channelToPlayback, boolean useRemoteService, boolean localMediaServer, 
                            String remoteMediaServerName, String channelName, int toleranceSecs, boolean doSegment)
{
    String failureReason = null;
    String testName = "liveStreamingTrick";
    
    int mediaServerIndex = -1;
    // If it is not a localMediaServer publish/playback then do not need any test setup.
    if (localMediaServer)
    { 
        // Setup for the test by creating a recording, publishing to CDS
        String results = performLiveStreamingSetup(changeChannel, channelToPlayback, doSegment);
        if (results != null)
        {
            // Problems setting up for test
            failureReason = "Problems during test setup: " + results;
            rxLog.callTrace("Failure performing live streaming setup : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Completed Test setup for playback");
        // Find the index of the local media server
        mediaServerIndex = findLocalMediaServer();
    }
    else
    {
        mediaServerIndex = findRemoteMediaServer(remoteMediaServerName);
    }

    if (mediaServerIndex == -1)
    {
        failureReason = "Problems getting media server";
        rxLog.callTrace("Failure getting media server : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Found media server");

    int channelItemIndex = getPublishedChannelItemByName(mediaServerIndex, channelName);
     
    if (channelItemIndex == -1)
    {
        failureReason = "Problems getting index for the published channel item.";
        rxLog.info("Problems getting index for the published channel item.");
        return failureReason;
    }
    rxLog.info(testName + " - Got Index for the published channel item" + channelItemIndex);
    
    if (!useRemoteService)
    {
        // Stop broadcast service selection so video device is available for playback
        tuneToServiceStop();        
    }
    
    // Create and start HNPlayer to play the 0th content created using the performSetup step
    if (!startHNPlayback(useRemoteService, mediaServerIndex, channelItemIndex))
    {
        failureReason = "Problems setting up remote player for content";
        rxLog.callTrace("Failure setting up remote player : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName = " - Created and started Remote player");    

    // Perform lst10_subtest 1 to verify EOS is not received
    failureReason = lst10_subtest1();
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during lst10_subtest1", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - lst10_subtest 1 completed");
    
    // Perform lst10_subtest 2 to verify pause, +/-2 trick modes
    failureReason = lst10_subtest2(toleranceSecs * 2);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during lst10_subtest2", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - lst10_subtest 2 completed");

    // Perform lst10_subtest 3 to verify +/-4 trick modes
    failureReason = lst10_subtest3(toleranceSecs * 4);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during lst10_subtest3", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - lst10_subtest 3 completed");
    
    // Perform lst10_subtest 4 to verify pause, -4, +/-8 trick modes
    failureReason = lst10_subtest4(toleranceSecs * 8);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during lst10_subtest4", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - lst10_subtest 4 completed");
    
    // Perform lst10_subtest 5 to verify slow speed forward and reverse
    failureReason = lst10_subtest5(toleranceSecs * 2);
    if (failureReason != null)
    {
        rxLog.callTrace("Failure during lst10_subtest5", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - lst10_subtest 5 completed");
    
    stopPlayback();
    rxLog.info(testName + " - completed");
    return failureReason; 
}
