// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END


///////////////////////////////////////////////////////////////////////////////
//
// Test cases covered: Simple Trick 20
// Purse: This level 2 script performs the completed live streaming
// scenario which is as follows:
// Test Setup:
// a. Publish the current channel to CDS
// b. Playback live streaming for 15 seconds
// c. Rewind to BOS
// d. Playback again for 15 seconds
// e. rewind, fast-forward, rewind, play again.
//
// Test Steps:
// 1. Test setup:
//    i.  Tune to a channel
//    ii. publish current to CDS.
// 2. Play back for 15 seconds via HN playback
// 3. Rewind to BOS at -1.0 rate
// 4. Play back again at normal 1x speed for 15 seconds.
// 5. Rewind to BOS again at -2.0 rate.
// 6. Fast-Forward at 2.0 rate to EOS
// 7. Rewind to BOS again at -4.0 rate.
// 8. Play at 1x speed again.
///////////////////////////////////////////////////////////////////////////////
 
// List of scripts used by this script
//
this.interpreter.source ("scripts/level2/utils/PlayerRateChangeUtil.bsh");
this.interpreter.source ("scripts/level2/utils/LiveStreamingTestSetup.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");
this.interpreter.source ("scripts/level1/PublishLiveChannelToCDS.bsh");

/**
 * Main method to perform completed non-segmented recording scenario.
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */

String simpleTrick20(int toleranceSecs)
{
    String testName = "simpleTrick20";
    String failureReason = null;

    //
    // Step 1: test setup: create a recording, publish to CDS
    //
    String results = performLiveStreamingSetup(false, GOLF_CHANNEL_IDX, false);
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace("Failure performing LiveStreaming setup : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Completed Test setup: Current channel has been published to CDS.");
    
    //
    // Step 2. Start playback via HN playback, play for 15 seconds
    //
    // Get local media server - find the index of the local media server
    int mediaPlayerIndex = findLocalMediaServer();
    if (mediaPlayerIndex == -1)
    {
        failureReason = "Problems getting local media server";
        rxLog.callTrace("Failure getting media server : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Found local media server");

    // get the Channel Item Index
    int channelItemIndex = getPublishedChannelItemByName(mediaPlayerIndex, CHANNEL_NAME_1);
    if (channelItemIndex == -1)
    {
        failureReason = "Problems getting index of published channel item";
        rxLog.info("Failure getting index of published channel item");
        return failureReason;
    }
    rxLog.info(testName + " - Got published channel item index: " +channelItemIndex);

    // create and start HN Player
    if (!startHNPlayback(true, mediaPlayerIndex, channelItemIndex))
    {
        failureReason = "Problems setting up remote player for content";
        rxLog.callTrace("Failure setting up remote player : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName +  " - Created and started Remote player.");

    int startPlayTime = getMediaTimeSecs();

    // Wait for 15 seconds
    if (!waitForSecs(15))
    {
        failureReason = "Problems with 15 seconds playback";
        rxLog.callTrace ("Failure while doing 15 seconds playback", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Played for 15 seconds");
   
    // verify current media time is within range of having played for 15
    int currentTime = getMediaTimeSecs();
    int minTime = startPlayTime + 15 - toleranceSecs;
    int maxTime = startPlayTime + 15 + toleranceSecs;
    if (currentTime > maxTime || currentTime < minTime)
    {
        failureReason = "At unexpected media time after playing for 15 seconds";
        rxLog.callTrace("Failure - unexpected media time after player start.  Media Time is " + currentTime +
            " secs, expected it to be between " + minTime + " and " + maxTime, this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Media time is within range after playback for 15 seconds");

    //
    // Step 3. Rewind in -1.0x mode to beginning
    // 
    failureReason = rewindToBOS(testName, (float)-1.0, toleranceSecs);
    if (failureReason != null)
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Completed rewind to BOS at rate -1.0");

    //
    // Step 4: play for 15 seconds
    //
    failureReason = playToMediaTime(testName, (float)1.0, 15, toleranceSecs);
    if (failureReason != null)
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Played at rate 1.0 for 15 secs");

    //
    // Step 5: Rewind to BOS at -2.0 speed
    // 
    failureReason = rewindToBOS(testName, (float)-2.0, toleranceSecs);
    if (failureReason != null)
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Completed rewind to BOS at rate -2.0");

    //
    // Step 6: Fast Forward at 2.0 speed
    // 
    float rate = (float) 2.0;
    if (null != (failureReason = rateChangeHelper(testName, rate)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Changed rate to 2.0");

    //Determine EOS wait time
    // *TODO* - OCORI-4022 - need to get duration from HTTP response
    // Guess at the value now
    int playbackLength = 180;
    currentTime = getMediaTimeSecs();
    int eosWaitTime = ((playbackLength - currentTime)/rate) + toleranceSecs;
    rxLog.info("waiting " +eosWaitTime +" secs for EOS event");
    // check for EOS
    if (!waitForEOS(eosWaitTime))
    {
        failureReason = "Failed to receive playback event: PLAYER_CONTROLLER_END_OF_CONTENT";
        rxLog.callTrace ("Failure - Did not receive PLAYER_CONTROLLER_END_OF_CONTENT: ", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Received EOS at end of ffwd at rate 2.0");

    //
    // Step 7. Rewind in -4.0x mode to beginning
    // 
    failureReason = rewindToBOS(testName, (float)-4.0, toleranceSecs);
    if (failureReason != null)
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName + " - Received BOS at rewind rate -4.0");

    //
    // Step 8. Play at 1x speed again.
    //
    // TODO: fix for OCORI-4022 is needed for this next test.  
    // Currently playbackLength is incorrect 
    //failureReason = play(testName, playbackLength, 10);
    //if(failureReason != null)
    //{
    //    stopPlayback();
    //    return failureReason;
    //}
        
    stopPlayback();
    return failureReason;
}
