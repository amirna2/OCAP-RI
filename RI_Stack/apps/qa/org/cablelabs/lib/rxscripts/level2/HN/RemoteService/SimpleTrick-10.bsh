// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

///////////////////////////////////////////////////////////////////////////////
//
// Purpose: This level 2 script performs the completed non-segmented recording
// scenario which is as follows:
// Test Setup:
// a. Create a recording
// b. Publish to CDS
//
// Test Steps:
// 1. Start playback in 1x mode, wait for 10 secs, verify mediatime is between 5 and 15 secs.
// 2. Rewind in -2x mode to beginning, verify 1st BOS is received.
// 3. Begin playback at 1x, wait for at least 33 seconds, check for 1st EOS event.
// 4. Rewind -1x mode to BOS, wait for atleast 33 seconds, when 2nd BOS is reached, fast forward in 2x mode.
// 5. Wait for 16 seconds, check for 2nd EOS event is received, rewind in -4x mode for at least 8 seconds.
// 6. Check for 3rd BOS event, playback in 1x mode till the 3rd EOS event is received.,
// 7. Stop playback.
//
///////////////////////////////////////////////////////////////////////////////
 
// List of scripts used by this script
//
this.interpreter.source ("scripts/level2/utils/RecordingTestSetup.bsh");
this.interpreter.source ("scripts/level1/PlaybackRecording.bsh");
this.interpreter.source ("scripts/level1/FindMediaServer.bsh");

/**
 * Main method to perform completed non-segmented recording scenario.
 *
 * @param useExistingRecs   if true, assume a recording exists, 
 *                          if false, delete all and create new one 
 *
 * @return  null string if no problems encountered, 
 *          failure reason if problems encountered 
 */

String simpleTrick10(boolean useExistingRecs, int recLengthSecs, boolean dvrPlayer, 
                     boolean useRemoteService, int toleranceSecs)
{
    String testName = "simpleTrick10";
    String failureReason = null;
    
    // Setup for the test by creating a recording, publishing to CDS
    String results = performRecordingTestSetup(testName, useExistingRecs, recLengthSecs, 
                                               recLengthSecs + toleranceSecs, false);
    if (results != null)
    {
        // Problems setting up for test
        failureReason = "Problems during test setup: " + results;
        rxLog.callTrace("Failure performing recording setup : ", this.callstack);
        return failureReason;
    }
    rxLog.info(testName + " - Completed Test setup for playback");
    
    // Start the playback 
    if (dvrPlayer)
    {
        if (!startPlayback())
        {
            failureReason = "Problems starting the player";
            rxLog.callTrace ("Failure starting the player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName +  " - Started DVR player");
    }
    else
    {
        // Find the index of the local media server
        int mediaServerIndex = findLocalMediaServer();
        if (mediaServerIndex == -1)
        {
            failureReason = "Problems getting local media server";
            rxLog.callTrace("Failure getting media server : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName + " - Found local media server at index: " + mediaServerIndex);
 
        // Get the content item index of first and only recording
        int recContentItem = getContentItemIndexOfFirstRecording(mediaServerIndex);
        if (recContentItem == -1)
        {
            failureReason = "Problems getting recording content item";
            rxLog.callTrace("Failure getting recording content item : ", this.callstack);
            return failureReason;
        }
        
        if (!useRemoteService)
        {
            // Stop broadcast service selection so video device is available for playback        
            tuneToServiceStop();                            
        }
 
        // Create and start HNPlayer to play the 0th content created using the performSetup step
        if (!startHNPlayback(useRemoteService, mediaServerIndex, recContentItem))
        {
            failureReason = "Problems setting up remote player for content";
            rxLog.callTrace("Failure setting up remote player : ", this.callstack);
            return failureReason;
        }
        rxLog.info(testName +" - Created and started Remote player");
    }
    
    int startMediaTimeSecs = getMediaTimeSecs();
    rxLog.info(testName +  " - Starting Media Time secs = " + startMediaTimeSecs);
    
    // Allow the playback for '10' secs
    if (!waitForSecs(10))
    {
        failureReason = "Problems waiting for playback completion: 10 secs ";
        rxLog.callTrace("Failure waiting for playback completion 10 secs", this.callstack);
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed wait for 10 secs");
    
    // Allow the playback for '10' secs
    int min = 10 + startMediaTimeSecs - toleranceSecs;
    int max = 10 + startMediaTimeSecs + toleranceSecs;
    if (min < 0)
    {
        min = 0;
    }
    if (useRemoteService || dvrPlayer)
    {
        if (!checkPlaybackPosition(min, max))
        {
            failureReason = "At unexpected media time after waiting for 10 secs ";;
            rxLog.callTrace("Failure during check for playbackposition is between " + min +
                    " and " + max + " secs.", this.callstack);
            stopPlayback();
            return failureReason;
        }
        rxLog.info(testName + " - Completed check 5 sec mediatime range of 10 seconds from BOS");
    }
    
    // Set playback rate to -2x
    if (null != (failureReason = rewindToBOS(testName, (float)-2.0, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed rewind to BOS at rate -2.0");
    
    // Use duration for remote service player
    int durationSecs = recLengthSecs;
    if (useRemoteService)
    {
        durationSecs = getDurationSecs();
    }
    
    Thread.sleep(1000);
    // Set playback rate to 1x
    if (null != (failureReason = fwdToEOS(testName, (float)1.0, durationSecs, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed first play to EOS at rate 1.0");

    Thread.sleep(1000);
    // Set playback rate to -1x
    if (null != (failureReason = rewindToBOS(testName, (float)-1.0, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed rewind to BOS at rate -1.0");

    Thread.sleep(1000);
    // Set playback rate to 2x
    if (null != (failureReason = fwdToEOS(testName, (float)2.0, durationSecs, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed ffwd to EOS at rate 2.0");

    Thread.sleep(1000);
    // Set playback rate to -4x
    if (null != (failureReason = rewindToBOS(testName, (float)-4.0, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed rewind to BOS at rate -4.0");
    
    Thread.sleep(1000);
    // Set playback rate to 1x
    if (null != (failureReason = fwdToEOS(testName, (float)1.0, durationSecs, toleranceSecs)))
    {
        stopPlayback();
        return failureReason;
    }
    rxLog.info(testName +  " - Completed second play to EOS at rate 1.0");
    
    stopPlayback();
    rxLog.info(testName +  " - Completed stopping remote playback and test");

    return failureReason;
}
