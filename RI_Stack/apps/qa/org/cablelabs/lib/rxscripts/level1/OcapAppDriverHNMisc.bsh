// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

// List of scripts used by this script
//
this.interpreter.source ("scripts/level1/OcapAppDriverHNContentServer.bsh");
this.interpreter.source ("scripts/level1/OcapAppDriverHNLocalServer.bsh");
this.interpreter.source ("scripts/level1/HttpTelnet.bsh");
this.interpreter.source ("scripts/level1/HNDevice.bsh");

String ocapAppDriverHNMisc()
{
    String failureReason = null;
    String logStr = "OcapAppDriverHNMisc - ";

    // 
    ////////////////////////////////////////////////////////////////////
    /// HN General Functions
    //
    int numMediaServers = getNumMediaServersOnNetwork();
    rxLog.info("testDriver: " + numMediaServers + " = getNumMediaServersOnNetwork()");
    
    String mediaServerInfo = getMediaServerInfo(0);
    rxLog.info("testDriver: " + mediaServerInfo + " = getMediaServerInfo(serverIndex)");
    
    int numDevicesOnNetwork = getNumDevicesOnNetwork();
    rxLog.info("testDriver: " + numDevicesOnNetwork + " = getNumDevicesOnNetwork()");

    String deviceInfo = getDeviceInfo(0);
    rxLog.info("testDriver: " + deviceInfo + " = getDeviceInfo(deviceIndex)");
    
    boolean friendlyNameChanged = changeRootDeviceFriendlyName("newName");
    rxLog.info("testDriver: " + friendlyNameChanged + 
                " = changeRootDeviceFriendlyName(newName)");

    boolean localMediaServerUDNChanged = changeLocalMediaServerUDN("newUDN");
    rxLog.info("testDriver: " + localMediaServerUDNChanged + 
                " = changeLocalMediaServerUDN(newUDN)");
    
    boolean rootDeviceByeByeSent = sendRootDeviceByeBye();
    rxLog.info("testDriver: " + rootDeviceByeByeSent + " = sendRootDeviceByeBye()");
    
    boolean rootDeviceAliveSent = sendRootDeviceAlive();
    rxLog.info("testDriver: " + rootDeviceAliveSent + " = sendRootDeviceAlive()");

    // Make sure local content server net module is available
    if (!rxDriverHN.waitForLocalContentServerNetModule(LOCAL_MEDIA_SERVER_TIMEOUT_SECS))
    {
        rxLog.info("waitForLocalContentServerNetModule failed");
    }
    rxLog.info("testDriver: " + rxDriverHN.findLocalMediaServer() +
                                   " = findLocalMediaServer()");
    
    int numNetworkInterfaces = getNumNetworkInterfaces();
    rxLog.info("testDriver: " +  numNetworkInterfaces + " = getNumNetworkInterfaces()");
    
    String networkInterface = getNetworkInterfaceInfo(0);
    rxLog.info("testDriver: " + networkInterface + " = getNetworkInterfaceInfo(index)");
    
    String rootDeviceFriendlyName = getRootDeviceFriendlyName();
    rxLog.info("testDriver: " + rootDeviceFriendlyName + " = getRootDeviceFriendlyName()");
    
    String mediaServerFriendlyName = getMediaServerFriendlyName(0);
    rxLog.info("testDriver: " + mediaServerFriendlyName + " = getMediaServerFriendlyName(0)");
    
    //TODO: OCORI-4292 Add media server name from config file
    //int mediaServerCountByName = getMediaServerCountByName("");
    int mediaServerCountByName = getMediaServerCountByName(SERVER_NAME);
    rxLog.info("testDriver: " + mediaServerCountByName + " = getMediaServerCountByName(0)");
    
    int startMS = getHttpAvailableSeekStartTimeMS();
    rxLog.info(logStr + "Call getHttpAvailableSeekStartTimeMS(), returned: " + startMS);
    
    int endMS = getHttpAvailableSeekEndTimeMS();
    rxLog.info(logStr + "Called getHttpAvailableSeekEndTimeMS(), returned: " + endMS);
   
    String field = "scid.dlna.org";
    String scid = getHttpHeadResponseField(field);
    rxLog.info(logStr + "Called getHttpHeadResponseField() with " + field + ", returned: " + scid);
   
    scid = getHttpGetResponseField(field);
    rxLog.info(logStr + "Called getHttpGetResponseField() with " + field + ", returned: " + scid);
 
    rxLog.info(logStr + "PASS");
    
    return failureReason;
}
