// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

boolean tuneToServiceByName()
{
    boolean returnValue = false;
    
    int tunerCnt = rxDriverCore.getNumTuners();
    if (tunerCnt <= 0)
    {
        rxLog.error("Unexpected number of tuners: " + tunerCnt);
        return returnValue;
    }

    int serviceCnt = rxDriverCore.getNumServices();
    if (tunerCnt <= 0)
    {
        rxLog.error("Unexpected number of tuners: " + tunerCnt);
        return returnValue;
    }

    int tunerIdx = 0;
    // This used to be set to 211 which causes the test to fail because
    // an AlternativeContentErrorEvent is received after calling 
    // ServiceContext.select() instead of the expected NormalContentEvent
    // which means the TUNED state is never reached
    int serviceIdx = DROOLING_BABY_CHANNEL_IDX;  

    String serviceInfo = rxDriverCore.getServiceInfo(serviceIdx);
    if (serviceInfo == null)
    {
        rxLog.error("Error getting service info");
        return returnValue;
    }
    rxLog.info("successfully got serviceInfo: "+serviceInfo);

    String serviceName = rxDriverCore.getInformativeChannelName(serviceIdx);
    if (serviceName == null)
    {
        rxLog.error("Error getting service name");
        return returnValue;
    }
    rxLog.info("successfully got serviceName: "+serviceName);

    if (rxDriverCore.serviceSelectByName(serviceName))
    {
        // Wait for the tuner to go the tuned state.
        if (!rxDriverCore.waitForTuningState(20, 2))
        {
            rxLog.error("Unable to tune to service by name: " + serviceName);
            returnValue = false;
        }
        else
        {
            returnValue = true;
        }
    }
    rxLog.info("successfully returned from serviceSelectByName: "+serviceName);

    int currentSvcIdx = rxDriverCore.getServiceIndex();
    if (currentSvcIdx == -1 || serviceIdx != currentSvcIdx)
    {
        rxLog.error("Error getting tuner service index, expected "+serviceIdx +" instead of "+currentSvcIdx);
        return returnValue;
    }
    rxLog.info("Verified serviceSelectByName successfully selected svcIndex "+serviceIdx);

    rxDriverCore.channelUp();
    // Wait for the tuner to go the tuned state.
    if (!rxDriverCore.waitForTuningState(20, 2))
    {
        rxLog.error("Unable to tune after channelUp");
        returnValue = false;
    }
    else
    {
        returnValue = true;
    }
    int newServIndex = rxDriverCore.getServiceIndex();
    if (newServIndex - currentSvcIdx != 1)
    {
        rxLog.error("Unable to channel up");
        returnValue = false;
        return returnValue;
    }
    rxLog.info("Channel up successful");

    rxDriverCore.channelDown();
    // Wait for the tuner to go the tuned state.
    if (!rxDriverCore.waitForTuningState(20, 2))
    {
        rxLog.error("Unable to tune after channelDown");
        returnValue = false;
    }
    else
    {
        returnValue = true;
    }
    newServIndex = rxDriverCore.getServiceIndex();
    if (newServIndex != currentSvcIdx)
    {
        rxLog.error("Unable to channel down");
        returnValue = false;
        return returnValue;
    }
    rxLog.info("Channel down successful");
 
    String informativeChannelName = null;
    int serviceIndex =  rxDriverCore.getServiceIndex();
    if (serviceIndex != -1) //error
    {
        if ((informativeChannelName = rxDriverCore.getInformativeChannelName(serviceIndex)) == null)
        {
            rxLog.error("getInformativeChannelName failed");
            returnValue = false;
        }
        else 
        {
            rxLog.info("InformativeChannelName for service index " + serviceIndex + " is "+ informativeChannelName);
        }
    } 
    else 
    {
        rxLog.error("getServiceIndex returned an error while getting informative Channel name");
        returnValue = false;
    }
    return returnValue;
}
