/*
 * @(#)ICxFactory.java
 *
 * Copyright (C) 2002 Matt Albrecht
 * groboclown@users.sourceforge.net
 * http://groboutils.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package net.sourceforge.groboutils.junit.v1.iftc;



/**
 * An ICxFactory is an extension of ImplFactory that has provisions for
 * cleaning up generated objects on test tear down.  Generated objects could
 * either have a finalize() method (not recommended, especially for tests),
 * or the factory could implement this interface to allow proper, timely
 * clean-up.
 * <P>
 * The clean-up is performed by <tt>InterfaceTestCase</tt> in the
 * <tt>tearDown()</tt> method.  If the hierarchy tests do not use this,
 * but instead use a variation of <tt>junit.framework.Test</tt>, then
 * they will need to implement their own tearDown() functionality. 
 * <P>
 * A valid alternative is to use Mock-Objects
 * (<a href="http://www.mockobjects.org">www.mockobjects.org</a>), which would
 * not need to be cleaned up like "live" objects do.
 *
 * @author    Matt Albrecht <a href="mailto:groboclown@users.sourceforge.net">groboclown@users.sourceforge.net</a>
 * @version   $Date: 2002/12/10 02:53:18 $
 * @since     October 30, 2002
 */
public interface ICxFactory extends ImplFactory
{
    /**
     * Allows the implementation to clean-up the instantiated object.
     * <tt>implObject</tt> is guaranteed to have been generated by this exact
     * factory.  Each object generated by this specific factory will be passed
     * to this method on the test's <tt>tearDown()</tt> method, in the
     * reverse order that they were created.
     *
     * @param implObject one of the objects created by this factory.
     * @exception Exception can be thrown when the deconstruction fails.
     *        This will not disrupt the remaining objects' tear down
     *        call.
     */
    public void tearDown( Object implObject ) throws Exception;
}

