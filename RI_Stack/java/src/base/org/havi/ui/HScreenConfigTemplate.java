// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

/*
 * Copyright 2000-2003 by HAVi, Inc. Java is a trademark of Sun
 * Microsystems, Inc. All rights reserved.  
 */

package org.havi.ui;

import java.util.Hashtable;

import org.cablelabs.impl.havi.*;
import org.cablelabs.impl.manager.HostManager;
import org.cablelabs.impl.manager.ManagerManager;
import org.cablelabs.impl.util.MPEEnv;

/**
 * This class describes a configuration of a screen device in terms of various
 * properties and their importance to the application. It is used to request a
 * valid instance of a configuration conforming to the description provided.
 * Sub-classes of this define additional constants which may be used for
 * additional properties. Those classes can be sub-classed in turn to add
 * further properties by systems using the HAVi UI.
 * 
 * <p>
 * In the event of conflicting preferences between HScreenConfigTemplates (for
 * example where a configuration is requested which conflicts with an existing
 * configuration) the following rules shall be applied in all cases.
 * 
 * <p>
 * <ul>
 * 
 * <li>Where all the conflicting preferences have priority
 * {@link HScreenConfigTemplate#PREFERRED},
 * {@link HScreenConfigTemplate#PREFERRED_NOT} or
 * {@link HScreenConfigTemplate#DONT_CARE}, the conflicting preferences shall be
 * discarded from the template.
 * 
 * <li>Where all the conflicting preferences have priority
 * {@link HScreenConfigTemplate#REQUIRED} or
 * {@link HScreenConfigTemplate#REQUIRED_NOT}, the method concerned shall fail.
 * 
 * <li>In situations other than the above, all preferences with priority
 * {@link HScreenConfigTemplate#PREFERRED},
 * {@link HScreenConfigTemplate#PREFERRED_NOT} or
 * {@link HScreenConfigTemplate#DONT_CARE} shall be discarded. If there is still
 * a conflict after this, the method concerned shall fail.
 * 
 * </ul>
 * 
 * <p>
 * 
 * Several preferences in this class are required to be not filled in by the
 * platform in templates generated by the platform. This shall mean:
 * <ul>
 * <li>the object for this preference (if there is one) is set to
 * <code>null</code></li>
 * <li>the priority for this preference is set to DONT_CARE</li>
 * </ul>
 * 
 * <hr>
 * The parameters to the constructors are as follows, in cases where parameters
 * are not used, then the constructor should use the default values.
 * <p>
 * <h3>Default parameter values exposed in the constructors</h3>
 * <table border>
 * <tr>
 * <th>Parameter</th>
 * <th>Description</th>
 * <th>Default value</th>
 * <th>Set method</th>
 * <th>Get method</th>
 * </tr>
 * <tr>
 * <td colspan=5>None.</td>
 * </tr>
 * </table>
 * <h3>Default parameter values not exposed in the constructors</h3>
 * <table border>
 * <tr>
 * <th>Description</th>
 * <th>Default value</th>
 * <th>Set method</th>
 * <th>Get method</th>
 * </tr>
 * <tr>
 * <td colspan=4>None.</td>
 * </tr>
 * </table>
 * 
 * @see HBackgroundConfigTemplate
 * @see HGraphicsConfigTemplate
 * @see HVideoConfigTemplate
 * @author Alex Resh
 * @author Todd Earles
 * @author Alan Cossitt (DSExt)
 * @version 1.1
 */

public abstract class HScreenConfigTemplate
{
    /**
     * A value for use in the priority field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority} methods
     * in the {@link org.havi.ui.HScreenConfigTemplate} that indicates that this
     * feature is required in the {@link org.havi.ui.HScreenConfiguration}. If
     * this feature is not available, do not select the
     * {@link org.havi.ui.HScreenConfiguration} object.
     */
    public static final int REQUIRED = 0x01;

    /**
     * A value for use in the priority field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority} methods
     * in the {@link org.havi.ui.HScreenConfigTemplate} that indicates that this
     * feature is desired in the {@link org.havi.ui.HScreenConfiguration}. A
     * selection with this feature is preferred over a selection that does not
     * include this feature, although both selections can be considered valid
     * matches.
     */
    public static final int PREFERRED = 0x02;

    /**
     * A value for use in the priority field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority} methods
     * in the {@link org.havi.ui.HScreenConfigTemplate} that indicates that the
     * presence or absence of this feature in the
     * {@link org.havi.ui.HScreenConfiguration} does not matter. Preferences
     * with this priority play no part in the selection procedure.
     */
    public static final int DONT_CARE = 0x03;

    /**
     * A value for use in the priority field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority} methods
     * in the {@link org.havi.ui.HScreenConfigTemplate} that indicates that this
     * feature is desired not to be present in the
     * {@link org.havi.ui.HScreenConfiguration}. A selection without this
     * feature is preferred over a selection that does not include this feature,
     * although both selections can be considered valid matches.
     */
    public static final int PREFERRED_NOT = 0x04;

    /**
     * A value for use in the priority field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority} methods
     * in the {@link org.havi.ui.HScreenConfigTemplate} that indicates that this
     * feature is required not to be present in the
     * {@link org.havi.ui.HScreenConfiguration}. If this feature is available,
     * do not select the {@link org.havi.ui.HScreenConfiguration} object.
     */
    public static final int REQUIRED_NOT = 0x05;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration should have zero impact on
     * already displayed backgrounds. If used with the
     * {@link org.havi.ui.HScreenConfigTemplate#REQUIRED REQUIRED} priority,
     * this means no changes shall be made. If used with the
     * {@link HScreenConfigTemplate#PREFERRED PREFERRED} priority, this means
     * changes may be made but should be minimized.
     * <p>
     * The {@link org.havi.ui.HScreenConfigTemplate#PREFERRED_NOT PREFERRED_NOT}
     * and {@link org.havi.ui.HScreenConfigTemplate#REQUIRED_NOT REQUIRED_NOT}
     * priorities may be ignored in the selection of an
     * {@link org.havi.ui.HScreenConfiguration HScreenConfiguration} for this
     * preference type.
     * <p>
     * This preference is used by the platform as a constraint in selecting
     * configurations. Templates generated by the platform and then returned to
     * applications (e.g. from a <code>getConfigTemplate</code> method) shall
     * not have this preference filled in by the platform.
     */
    public static final int ZERO_BACKGROUND_IMPACT = 0x01;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration should have zero impact on
     * already running graphical applications. If used with the
     * {@link org.havi.ui.HScreenConfigTemplate#REQUIRED REQUIRED} priority,
     * this means no changes shall be made. If used with the
     * {@link HScreenConfigTemplate#PREFERRED PREFERRED} priority, this means
     * changes may be made but should be minimized.
     * <p>
     * The {@link org.havi.ui.HScreenConfigTemplate#PREFERRED_NOT PREFERRED_NOT}
     * and {@link org.havi.ui.HScreenConfigTemplate#REQUIRED_NOT REQUIRED_NOT}
     * priorities may be ignored in the selection of an
     * {@link org.havi.ui.HScreenConfiguration HScreenConfiguration} for this
     * preference type.
     * <p>
     * This preference is used by the platform as a constraint in selecting
     * configurations. Templates generated by the platform and then returned to
     * applications (e.g. from a <code>getConfigTemplate</code> method) shall
     * not have this preference filled in by the platform.
     */
    public static final int ZERO_GRAPHICS_IMPACT = 0x02;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration should have zero impact on
     * already running video streams. If used with the
     * {@link HScreenConfigTemplate#REQUIRED REQUIRED} priority, this means no
     * changes shall be made. If used with the
     * {@link HScreenConfigTemplate#PREFERRED PREFERRED} priority, this means
     * changes may be made but should be minimized.
     * <p>
     * The {@link org.havi.ui.HScreenConfigTemplate#PREFERRED_NOT PREFERRED_NOT}
     * and {@link org.havi.ui.HScreenConfigTemplate#REQUIRED_NOT REQUIRED_NOT}.
     * priorities may be ignored in the selection of an
     * {@link org.havi.ui.HScreenConfiguration HScreenConfiguration} for this
     * preference type.
     * <p>
     * This preference is used by the platform as a constraint in selecting
     * configurations. Templates generated by the platform and then returned to
     * applications (e.g. from a <code>getConfigTemplate</code> method) shall
     * not have this preference filled in by the platform.
     */
    public static final int ZERO_VIDEO_IMPACT = 0x03;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports an interlaced display.
     */
    public static final int INTERLACED_DISPLAY = 0x04;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports flicker filtering (if it
     * supports an interlaced screen).
     */
    public static final int FLICKER_FILTERING = 0x05;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference},
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferenceObject
     * getPreferenceObject} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports the display of video
     * streams and graphics with aligned pixels of the same size. Alignment of
     * the origins of the two pixel coordinate spaces is explicitly not
     * required. Where a video device is moving the video relative to the screen
     * in real time (e.g. implementing pan and scan), graphics configurations
     * shall only support this feature where the implementation of the graphics
     * device can track the position changes in the video device automatically.
     * <p>
     * If this preference is set and used to request an
     * {@link org.havi.ui.HVideoConfiguration HVideoConfiguration} then an
     * {@link org.havi.ui.HGraphicsConfiguration HGraphicsConfiguration} shall
     * be used as the preference object. If it is set and used to request an
     * {@link org.havi.ui.HGraphicsConfiguration HGraphicsConfiguration} then an
     * {@link org.havi.ui.HVideoConfiguration HVideoConfiguration} shall be used
     * as the preference object. Requesting an
     * {@link org.havi.ui.HVideoConfiguration HVideoConfiguration} which is
     * VIDEO_GRAPHICS_PIXEL_ALIGNED with another
     * {@link org.havi.ui.HVideoConfiguration HVideoConfiguration} shall fail
     * unless the system concerned supports two {@link org.havi.ui.HVideoDevice
     * HVideoDevice} objects which can support this exact feature.
     * <p>
     * This preference is used by the platform as a constraint in selecting
     * configurations. Templates generated by the platform and then returned to
     * applications (e.g. from a <code>getConfigTemplate</code> method) shall
     * not have this preference filled in by the platform.
     */
    public static final int VIDEO_GRAPHICS_PIXEL_ALIGNED = 0x06;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference},
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferenceObject
     * getPreferenceObject} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports the pixel aspect ratio,
     * as specified in a Dimension object which indicates the (relative) x, y
     * pixel aspect ratio.
     * <p>
     * Instances of {@link org.havi.ui.HScreenConfigTemplate
     * HScreenConfigTemplate} generated by the platform and returned to
     * applications (e.g. from
     * {@link org.havi.ui.HGraphicsConfiguration#getConfigTemplate
     * getConfigTemplate} shall have this preference set to a platform specific
     * value with the {@link org.havi.ui.HScreenConfigTemplate#REQUIRED
     * REQUIRED} priority.
     */
    public static final int PIXEL_ASPECT_RATIO = 0x07;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference},
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferenceObject
     * getPreferenceObject} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports the pixel resolution, as
     * specified in a Dimension object which indicates the pixel resolution of
     * (the area of) the graphics device (as specified using the
     * {@link org.havi.ui.HScreenConfigTemplate#SCREEN_RECTANGLE
     * SCREEN_RECTANGLE} preference).
     * <p>
     * Instances of {@link org.havi.ui.HScreenConfigTemplate
     * HScreenConfigTemplate} generated by the platform and returned to
     * applications (e.g. from
     * {@link org.havi.ui.HGraphicsConfiguration#getConfigTemplate
     * getConfigTemplate} shall have this preference set to a platform specific
     * value with the {@link org.havi.ui.HScreenConfigTemplate#REQUIRED
     * REQUIRED} priority.
     */
    public static final int PIXEL_RESOLUTION = 0x08;

    /**
     * A value for use in the preference field of the
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference setPreference},
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferenceObject
     * getPreferenceObject} and
     * {@link org.havi.ui.HScreenConfigTemplate#getPreferencePriority
     * getPreferencePriority} methods in the
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplate} that
     * indicates that the device configuration supports presentation on a
     * particular on-screen area, as specified in an
     * {@link org.havi.ui.HScreenRectangle HScreenRectangle} object
     * <p>
     * Use of this value with an {@link org.havi.ui.HScreenRectangle
     * HScreenRectangle} object other than the identity rectangle
     * <code>[0, 0 -> 1, 1]</code> implies scaling of the presentation to fit
     * within the specified HScreenRectangle.
     * <p>
     * Platforms not supporting such scaling at all or choosing to expose such
     * scaling through other APIs should only return
     * {@link org.havi.ui.HScreenConfigTemplate HScreenConfigTemplates} with the
     * {@link org.havi.ui.HScreenRectangle HScreenRectangle} <code>[0, 0 ->
     * 1, 1]</code> for the SCREEN_RECTANGLE preference.
     * <p>
     * Instances of {@link org.havi.ui.HScreenConfigTemplate
     * HScreenConfigTemplate} generated by the platform and returned to
     * applications (e.g. from
     * {@link org.havi.ui.HGraphicsConfiguration#getConfigTemplate
     * getConfigTemplate} shall have this preference set to a platform specific
     * value with the {@link org.havi.ui.HScreenConfigTemplate#REQUIRED
     * REQUIRED} priority.
     */
    public static final int SCREEN_RECTANGLE = 0x09;

    /**
     * Is DSExt (Device Settings Extension) being used.
     */
    protected static final boolean dsExtUsed = (MPEEnv.getEnv("ocap.api.option.ds") != null);

    /**
     * Used if DSExt is being used
     */
    protected static int ZOOM_PREFERENCE = -1;

    private Hashtable preferences = null;

    /**
     * Array of preference priorities
     */
    // private int[] preferencePriority;

    /**
     * Array of preference objects. Boolean preferences do not have an
     * associated object so the corresponding entries in this array are not used
     * (remains null).
     */
    // private Object[] preferenceObject;

    /**
     * Creates an {@link org.havi.ui.HScreenConfigTemplate} object. See the
     * class description for details of constructor parameters and default
     * values.
     */
    public HScreenConfigTemplate()
    {
        if (dsExtUsed && ZOOM_PREFERENCE == -1)
        {
            ZOOM_PREFERENCE = ((HostManager) ManagerManager.getInstance(HostManager.class)).getZoomModePreference();
        }

        int numPreferences = getPreferenceCount();

        // // Create the arrays
        // preferencePriority = new int[numPreferences];
        // preferenceObject = new Object[numPreferences];
        preferences = new Hashtable(numPreferences);

        // Set default values
        setPreference(ZERO_BACKGROUND_IMPACT, DONT_CARE);
        setPreference(ZERO_GRAPHICS_IMPACT, DONT_CARE);
        setPreference(ZERO_VIDEO_IMPACT, DONT_CARE);
        setPreference(INTERLACED_DISPLAY, DONT_CARE);
        setPreference(FLICKER_FILTERING, DONT_CARE);
        setPreference(VIDEO_GRAPHICS_PIXEL_ALIGNED, null, DONT_CARE);
        setPreference(PIXEL_ASPECT_RATIO, null, DONT_CARE);
        setPreference(PIXEL_RESOLUTION, null, DONT_CARE);
        setPreference(SCREEN_RECTANGLE, null, DONT_CARE);
    }

    /**
     * Set the indicated preference to have the specified priority. If the
     * preference has been previously set, then the previous priority for the
     * preference shall be overwritten.
     * <p>
     * Attributes that are not filled in a template (through
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference}), shall have the
     * priority {@link org.havi.ui.HScreenConfigTemplate#DONT_CARE}. Any
     * configuration always satisfies these attributes.
     * 
     * @param preference
     *            the preference to be indicated. Valid values for an
     *            {@link org.havi.ui.HScreenConfigTemplate} are:
     *            {@link org.havi.ui.HScreenConfigTemplate#ZERO_GRAPHICS_IMPACT}
     *            ,
     *            {@link org.havi.ui.HScreenConfigTemplate#ZERO_BACKGROUND_IMPACT}
     *            , {@link org.havi.ui.HScreenConfigTemplate#ZERO_VIDEO_IMPACT},
     *            {@link org.havi.ui.HScreenConfigTemplate#INTERLACED_DISPLAY}
     *            and
     *            {@link org.havi.ui.HScreenConfigTemplate#FLICKER_FILTERING}.
     *            <p>
     *            Subclasses may add further valid values. An
     *            IllegalArgumentException shall be thrown if the preference is
     *            not a valid value for this instance of
     *            {@link org.havi.ui.HScreenConfigTemplate}
     * @param priority
     *            the priority of the preference. Valid values are:
     *            {@link org.havi.ui.HScreenConfigTemplate#REQUIRED},
     *            {@link org.havi.ui.HScreenConfigTemplate#PREFERRED},
     *            {@link org.havi.ui.HScreenConfigTemplate#DONT_CARE},
     *            {@link org.havi.ui.HScreenConfigTemplate#PREFERRED_NOT} and
     *            {@link org.havi.ui.HScreenConfigTemplate#REQUIRED_NOT}.
     *            <p>
     *            If <code>priority</code> is not a valid priority as defined
     *            here a java.lang.IllegalArgumentException will be thrown.
     */
    public void setPreference(int preference, int priority)
    {
        // Check that preference and priority values are valid for this
        // template
        if ((isBooleanPreference(preference) == false) || (priority < REQUIRED) || (priority > REQUIRED_NOT))
            throw new IllegalArgumentException();

        // Set the preference priority
        addDuple(preference, null, priority);

        // preferencePriority[preference - 1] = priority;
    }

    /**
     * Set the indicated preference (and associated value object) to have the
     * specified priority. If the preference has been previously set, then the
     * previous object and priority shall be overwritten.
     * <p>
     * Attributes that are not filled in a template (through
     * {@link org.havi.ui.HScreenConfigTemplate#setPreference}), shall have the
     * priority {@link org.havi.ui.HScreenConfigTemplate#DONT_CARE}. Any
     * configuration always satisfies these attributes.
     * <p>
     * An application which wishes to remove a preference from an existing
     * template (e.g. one generated by the platform) may call this method with
     * null for the object parameter.
     * 
     * @param preference
     *            the preference to be indicated. Valid values for an
     *            {@link org.havi.ui.HScreenConfigTemplate} are:
     *            {@link org.havi.ui.HScreenConfigTemplate#VIDEO_GRAPHICS_PIXEL_ALIGNED}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_ASPECT_RATIO}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_RESOLUTION}
     *            and {@link org.havi.ui.HScreenConfigTemplate#SCREEN_RECTANGLE}
     *            .
     *            <p>
     *            Subclasses may add further valid values. An
     *            IllegalArgumentException shall be thrown if the preference is
     *            not a valid value for this instance of
     *            {@link org.havi.ui.HScreenConfigTemplate}
     * @param object
     *            the Object associated with the given preference, or
     *            <code>null</code>.
     * @param priority
     *            the priority of the preference. Valid values include:
     *            {@link org.havi.ui.HScreenConfigTemplate#REQUIRED},
     *            {@link org.havi.ui.HScreenConfigTemplate#PREFERRED},
     *            {@link org.havi.ui.HScreenConfigTemplate#DONT_CARE},
     *            {@link org.havi.ui.HScreenConfigTemplate#PREFERRED_NOT} and
     *            {@link org.havi.ui.HScreenConfigTemplate#REQUIRED_NOT}.
     *            <p>
     *            If <code>priority</code> is not a valid priority as defined
     *            here a java.lang.IllegalArgumentException will be thrown.
     */
    public void setPreference(int preference, Object object, int priority)
    {
        // Check that preference and priority values are valid for this
        // template
        if ((isObjectPreference(preference) == false) || (priority < REQUIRED) || (priority > REQUIRED_NOT))
            throw new IllegalArgumentException();

        // If the object is null, then 'remove' the preference, which
        // sets its priority to DONT_CARE.
        if (object == null) priority = DONT_CARE;

        addDuple(preference, object, priority);

        // Set the preference object and priority.
        // preferenceObject[preference - 1] = object;
        // preferencePriority[preference - 1] = priority;
    }

    private void addDuple(int preference, Object object, int priority)
    {
        // TODO: remove debug
        // System.out.println("Adding duple:  preference="+preference+", "+"object="+object+", priority="+priority);

        PreferenceDuple duple = new PreferenceDuple(object, priority);
        Integer preferenceI = new Integer(preference);

        preferences.put(preferenceI, duple);
    }

    /*
     * NOTE: The description for this method (getPreferencePriority) changed
     * between 1.01b and 1.1, but I don't think that the change (to the 2nd
     * paragraph) makes sense. Here is the original paragraph:
     * 
     * <pre> By default the preferences in a template returned from the system
     * will have an {@link #DONT_CARE} priority unless specified otherwise. Any
     * configuration always satisfies these attributes. </pre>
     * 
     * The new paragraph seems to conflict with the description(s) for {@link
     * #setPreferencePriority}, which say that DONT_CARE is still the default.
     * The new paragraph implies that whether the option is implemented or not
     * says whether the default is REQUIRED/REQUIRED_NOT.
     */
    /**
     * Return the priority for the specified preference.
     * <p>
     * Individual properties in the ConfigTemplate can then be examined using
     * the getPreferencePriority and getPreferenceObject methods -- features
     * that are implemented will return {@link HScreenConfigTemplate#REQUIRED},
     * features that are not implemented will return
     * {@link HScreenConfigTemplate#REQUIRED_NOT}.
     * 
     * @param preference
     *            the preference to be indicated. Valid values for an
     *            {@link org.havi.ui.HScreenConfigTemplate} are:
     *            {@link org.havi.ui.HScreenConfigTemplate#ZERO_BACKGROUND_IMPACT}
     *            ,
     *            {@link org.havi.ui.HScreenConfigTemplate#ZERO_GRAPHICS_IMPACT}
     *            , {@link org.havi.ui.HScreenConfigTemplate#ZERO_VIDEO_IMPACT},
     *            {@link org.havi.ui.HScreenConfigTemplate#INTERLACED_DISPLAY},
     *            {@link org.havi.ui.HScreenConfigTemplate#FLICKER_FILTERING},
     *            {@link org.havi.ui.HScreenConfigTemplate#VIDEO_GRAPHICS_PIXEL_ALIGNED}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_ASPECT_RATIO}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_RESOLUTION}
     *            and {@link org.havi.ui.HScreenConfigTemplate#SCREEN_RECTANGLE}
     *            .
     *            <p>
     *            Subclasses may add further valid values. An
     *            IllegalArgumentException shall be thrown if the preference is
     *            not a valid value for this instance of
     *            {@link org.havi.ui.HScreenConfigTemplate}
     * @return the priority for the specified preference.
     */
    public int getPreferencePriority(int preference)
    {
        // If the preference is valid then return the priority. Otherwise,
        // thrown an exception.
        if (isBooleanPreference(preference) || isObjectPreference(preference))
        {
            PreferenceDuple duple = getDuple(preference);
            if (duple == null)
            {
                System.out.println("preference not found=" + preference);
                return 0; // emulates old behavior
            }
            return duple.priority;
        }
        else
        {
            throw new IllegalArgumentException();
        }

        // if (isBooleanPreference(preference) ||
        // isObjectPreference(preference))
        // return preferencePriority[preference - 1];
        // else
        // throw new IllegalArgumentException();
    }

    private PreferenceDuple getDuple(int preference)
    {
        return (PreferenceDuple) preferences.get(new Integer(preference));
    }

    /**
     * Return the preference object for the specified preference.
     * <p>
     * Instances of {@link org.havi.ui.HScreenConfigTemplate} which have not had
     * this preference set shall return null for this object. Note that
     * instances constructed by the platform and returned to applications are
     * required to have all preferences (except where explicitly identified) set
     * by the platform before it is returned.
     * 
     * @param preference
     *            the preference to be indicated. Valid values for an
     *            {@link org.havi.ui.HScreenConfigTemplate} are:
     *            {@link org.havi.ui.HScreenConfigTemplate#VIDEO_GRAPHICS_PIXEL_ALIGNED}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_ASPECT_RATIO}
     *            , {@link org.havi.ui.HScreenConfigTemplate#PIXEL_RESOLUTION}
     *            and {@link org.havi.ui.HScreenConfigTemplate#SCREEN_RECTANGLE}
     *            .
     *            <p>
     *            Subclasses may add further valid values. A
     *            IllegalArgumentException shall be thrown if the preference is
     *            not a valid value for this instance of
     *            {@link org.havi.ui.HScreenConfigTemplate}, or if
     *            <code>preference</code> does not have an associated value
     *            object.
     * @return the preference object for the specified preference.
     */
    public Object getPreferenceObject(int preference)
    {
        // If the preference is valid then return the priority. Otherwise,
        // thrown an exception.
        if (isObjectPreference(preference))
        {
            PreferenceDuple duple = getDuple(preference);

            if (duple == null)
            {
                System.out.println("preference not found=" + preference);
                return null; // this emulates old behavior
            }

            return duple.object;

            // return preferenceObject[preference - 1];
        }
        else
            throw new IllegalArgumentException();
    }

    /**
     * Return the number of preferences supported by this configuration
     * template.
     */
    int getPreferenceCount()
    {
        // The following assumes a contiguous array of preferences where the
        // last value is the one named here. It is also assumed that the named
        // values are based (start) at 1.
        return SCREEN_RECTANGLE;
    }

    /**
     * Return true if the specified value is a valid boolean preference.
     * Otherwise, return false.
     */
    boolean isBooleanPreference(int preference)
    {
        return ((preference >= ZERO_BACKGROUND_IMPACT) && (preference <= FLICKER_FILTERING));
    }

    /**
     * Return true if the specified value is a valid object based preference.
     * Otherwise, return false.
     */
    boolean isObjectPreference(int preference)
    {
        if ((preference >= VIDEO_GRAPHICS_PIXEL_ALIGNED) && (preference <= SCREEN_RECTANGLE))
        {
            return true;
        }

        if (dsExtUsed && (preference == ZOOM_PREFERENCE))
        {
            return true;
        }

        return false;

    }

    /**
     * Returns a boolean indicating whether or not the specified screen
     * configuration can support the feature set of this template.
     * 
     * @param hsc
     *            - the configuration to be checked
     * @return true if the configuration can support the feature set of this
     *         template, false otherwise.
     */
    boolean isConfigSupported(HScreenConfiguration hsc)
    {
        // Check INTERLACED_DISPLAY
        int priority = getPreferencePriority(INTERLACED_DISPLAY);
        if (hsc.getInterlaced())
        {
            if (priority == REQUIRED_NOT) return false;
        }
        else
        {
            if (priority == REQUIRED) return false;
        }

        // Check FLICKER_FILTERING
        priority = getPreferencePriority(FLICKER_FILTERING);
        if (hsc.getFlickerFilter())
        {
            if (priority == REQUIRED_NOT) return false;
        }
        else
        {
            if (priority == REQUIRED) return false;
        }

        // Check PIXEL_ASPECT_RATIO
        priority = getPreferencePriority(PIXEL_ASPECT_RATIO);
        if (priority != DONT_CARE)
        {
            if (hsc.getPixelAspectRatio().equals(getPreferenceObject(PIXEL_ASPECT_RATIO)))
            {
                if (priority == REQUIRED_NOT) return false;
            }
            else
            {
                if (priority == REQUIRED) return false;
            }
        }

        // Check PIXEL_RESOLUTION
        priority = getPreferencePriority(PIXEL_RESOLUTION);
        if (priority != DONT_CARE)
        {
            if (hsc.getPixelResolution().equals(getPreferenceObject(PIXEL_RESOLUTION)))
            {
                if (priority == REQUIRED_NOT) return false;
            }
            else
            {
                if (priority == REQUIRED) return false;
            }
        }

        // Check SCREEN_RECTANGLE
        priority = getPreferencePriority(SCREEN_RECTANGLE);
        if (priority != DONT_CARE)
        {
            if (HaviToolkit.getToolkit().isEqual(hsc.getScreenArea(),
                    (HScreenRectangle) getPreferenceObject(SCREEN_RECTANGLE)))
            {
                if (priority == REQUIRED_NOT) return false;
            }
            else
            {
                if (priority == REQUIRED) return false;
            }
        }

        // All checks passed
        return true;
    }

    private class PreferenceDuple
    {
        public Object object = null;

        public int priority = DONT_CARE;

        private PreferenceDuple()
        {
        };

        public PreferenceDuple(Object o, int priority)
        {
            this();
            this.object = o;
            this.priority = priority;
        }
    }
}
