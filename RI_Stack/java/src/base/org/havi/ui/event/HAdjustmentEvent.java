// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

/*
 * Copyright 2000-2003 by HAVi, Inc. Java is a trademark of Sun
 * Microsystems, Inc. All rights reserved.  
 */

package org.havi.ui.event;

import org.havi.ui.HAdjustmentValue;

/**
 * An {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} event is used
 * to interact with a component implementing the
 * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} interface as follows:
 * 
 * <p>
 * <ul>
 * 
 * <li>An {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} event may
 * be sent from the HAVi system to the component to cause a change to the value
 * or editable mode of the component as a result of user interaction. For
 * example, this event may be generated by a virtual keyboard user interface on
 * a platform which lacks suitable adjustment keys.
 * 
 * <li>An {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} event is
 * sent from the component to all registered
 * {@link org.havi.ui.event.HAdjustmentListener HAdjustmentListeners} when a
 * change to the value or editable mode of the component occurs.
 * 
 * </ul>
 * <p>
 * 
 * All interoperable HAVi components which expect to receive
 * {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} events should
 * also implement the {@link org.havi.ui.HAdjustmentInputPreferred
 * HAdjustmentInputPreferred} interface.
 * 
 * <hr>
 * The parameters to the constructors are as follows, in cases where parameters
 * are not used, then the constructor should use the default values.
 * <p>
 * <h3>Default parameter values exposed in the constructors</h3>
 * <table border>
 * <tr>
 * <th>Parameter</th>
 * <th>Description</th>
 * <th>Default value</th>
 * <th>Set method</th>
 * <th>Get method</th>
 * </tr>
 * <tr>
 * <td colspan=5>None.</td>
 * </tr>
 * </table>
 * <h3>Default parameter values not exposed in the constructors</h3>
 * <table border>
 * <tr>
 * <th>Description</th>
 * <th>Default value</th>
 * <th>Set method</th>
 * <th>Get method</th>
 * </tr>
 * <tr>
 * <td colspan=4>None.</td>
 * </tr>
 * </table>
 * 
 * @author Aaron Kamienski
 */

public class HAdjustmentEvent extends java.awt.AWTEvent
{

    /**
     * The first integer id in the range of event ids supported by the
     * {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} class.
     */
    public static final int ADJUST_FIRST = RESERVED_ID_MAX + 1;

    /**
     * The last integer id in the range of event ids supported by the
     * {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} class.
     */
    public static final int ADJUST_LAST = ADJUST_FIRST + 5;

    /**
     * An adjustment event with this id indicates that the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component may be
     * about to change. This event is sent when the user causes the component to
     * enter its editable mode. Note that it is a platform specific
     * implementation option for such components to enter editable mode
     * automatically e.g. when they receive input focus. In such a case the
     * order in which the {@link org.havi.ui.event.HFocusEvent HFocusEvent} and
     * {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} are sent is
     * platform specific.
     * 
     * @see HAdjustmentValue#getAdjustMode
     */
    public static final int ADJUST_START_CHANGE = ADJUST_FIRST;

    /**
     * An adjustment event with this id is sent whenever the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component is
     * decreased by one unit.
     * 
     * @see HAdjustmentValue#setUnitIncrement
     * @see HAdjustmentValue#getUnitIncrement
     */
    public static final int ADJUST_LESS = ADJUST_FIRST + 1;

    /**
     * An adjustment event with this id is sent whenever the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component is
     * increased by one unit.
     * 
     * @see HAdjustmentValue#setUnitIncrement
     * @see HAdjustmentValue#getUnitIncrement
     */
    public static final int ADJUST_MORE = ADJUST_FIRST + 2;

    /**
     * An adjustment event with this id is sent whenever the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component is
     * decreased by one block.
     * 
     * @see HAdjustmentValue#setBlockIncrement
     * @see HAdjustmentValue#getBlockIncrement
     */
    public static final int ADJUST_PAGE_LESS = ADJUST_FIRST + 3;

    /**
     * An adjustment change event with this id is sent whenever the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component is
     * increased by one block.
     * 
     * @see HAdjustmentValue#setBlockIncrement
     * @see HAdjustmentValue#getBlockIncrement
     */
    public static final int ADJUST_PAGE_MORE = ADJUST_FIRST + 4;

    /**
     * An adjustment event with this id indicates that the value of an
     * {@link org.havi.ui.HAdjustmentValue HAdjustmentValue} component has been
     * finally set. This event is sent when the user causes the component to
     * leave its editable mode. Note that it is a platform specific
     * implementation option for such components to leave editable mode
     * automatically e.g. when they lose input focus. In such a case the order
     * in which the {@link org.havi.ui.event.HFocusEvent HFocusEvent} and
     * {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent} are sent is
     * platform specific.
     * 
     * @see HAdjustmentValue#getAdjustMode
     */
    public static final int ADJUST_END_CHANGE = ADJUST_FIRST + 5;

    /**
     * Constructs an {@link org.havi.ui.event.HAdjustmentEvent HAdjustmentEvent}
     * .
     * 
     * @param source
     *            The {@link org.havi.ui.HAdjustmentInputPreferred
     *            HAdjustmentInputPreferred} component whose value has been
     *            modified.
     * @param id
     *            The event id of the {@link org.havi.ui.event.HAdjustmentEvent
     *            HAdjustmentEvent} generated by the
     *            {@link org.havi.ui.HAdjustmentInputPreferred
     *            HAdjustmentInputPreferred} component. This is the value that
     *            will be returned by the event object's <code>getID</code>
     *            method.
     */
    public HAdjustmentEvent(org.havi.ui.HAdjustmentInputPreferred source, int id)
    {
        super(source, id);
    }
}
