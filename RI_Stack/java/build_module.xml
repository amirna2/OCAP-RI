<?xml version="1.0"?>

<!-- COPYRIGHT_BEGIN
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER

Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 

This software is available under multiple licenses: 

(1) BSD 2-clause 
 Redistribution and use in source and binary forms, with or without modification, are
 permitted provided that the following conditions are met:
      ·Redistributions of source code must retain the above copyright notice, this list 
           of conditions and the following disclaimer.
      ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
           and the following disclaimer in the documentation and/or other materials provided with the 
           distribution.
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(2) GPL Version 2
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, version 2. This program is distributed
 in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE. See the GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program.If not, see<http:www.gnu.org/licenses/>.

(3)CableLabs License
 If you or the company you represent has a separate agreement with CableLabs
 concerning the use of this code, your rights and obligations with respect
 to this code shall be as set forth therein. No license is granted hereunder
 for any other purpose.

 Please contact CableLabs if you need additional information or 
 have any questions.

     CableLabs
     858 Coal Creek Cir
     Louisville, CO 80027-9750
     303 661-9100
  COPYRIGHT_END -->

<!-- This project depends on properties defined in the main Java build file,
     the most important of which are:

       build.lib.MODULE,          the name of the module (base or extension)
                                  that is to be copied; and

       build.lib.MODULE.filelist, the base name of the source and test
                                  filelist files, which contain the names of
                                  the source and test files that are needed
                                  to build that module.

     DO NOT CALL TARGETS IN THIS FILE DIRECTLY
 -->
<project name="Build Java Module" basedir="..">

    <!-- Source filelist files -->
    <property name="src_exclude_filelist" value="${build.lib.MODULE.filelist}.exclude.filelist" />
    <property name="test_exclude_filelist" value="${build.lib.MODULE.filelist}.junit.exclude.filelist" />

    <!-- Directories for the module and associated JUnit source code -->
    <property name="src_gendir" location="${gendir}/${srcdir}/${build.lib.MODULE}" />
    <property name="testsrc_gendir" location="${gendir}/${test_srcdir}/${build.lib.MODULE}" />

    <!-- Define a patternset that includes all java source files in a
         particular module sub directory -->
    <patternset id="all-java-source">
        <include name="${srcdir}/${build.ocap.BASE}/**/*.java" />
        <include name="${srcdir}/${build.ocap.DVREXT}/**/*.java" if="${build.ocap.DVR_ENABLED}" />
        <include name="${srcdir}/${build.ocap.HNEXT}/**/*.java" if="${build.ocap.HN_ENABLED}" />
        <include name="${srcdir}/${build.ocap.FPEXT}/**/*.java" if="${build.ocap.FP_ENABLED}" />
        <include name="${srcdir}/${build.ocap.DSEXT}/**/*.java" if="${build.ocap.DS_ENABLED}" />
    </patternset>
    <patternset id="all-test-source">
        <include name="${test_srcdir}/${build.ocap.BASE}/**/*.java" />
        <include name="${test_srcdir}/${build.ocap.DVREXT}/**/*.java" if="${build.ocap.DVR_ENABLED}" />
        <include name="${test_srcdir}/${build.ocap.HNEXT}/**/*.java" if="${build.ocap.HN_ENABLED}" />
        <include name="${test_srcdir}/${build.ocap.FPEXT}/**/*.java" if="${build.ocap.FP_ENABLED}" />
        <include name="${test_srcdir}/${build.ocap.DSEXT}/**/*.java" if="${build.ocap.DS_ENABLED}" />
    </patternset>

    <!-- Create the main gendir directories for this module -->
    <target name="mkdir" description="Make all directories">
        <mkdir dir="${src_gendir}" />
        <mkdir dir="${testsrc_gendir}" />
    </target>

    <!-- Delete all copied source -->
    <target name="clean">
        <delete quiet="true" dir="${src_gendir}" />
        <delete quiet="true" dir="${testsrc_gendir}" />
    </target>

    <!-- Determine whether or not our source code is out-of-date because the filelist
         file has been updated -->
    <target name="check_src_uptodate">
        <uptodate targetfile="${gendir}/${src_exclude_filelist}" srcfile="java/${src_exclude_filelist}"
                  property="src_uptodate" />
    </target>

    <!-- Remove all copied java source for this module -->
    <target name="clean.source.filelist" depends="check_src_uptodate" unless="src_uptodate" >
        <echo message="Java source filelist (${src_exclude_filelist}) has changed.  All source for this module will be copied and rebuilt!" />
        <delete quiet="true">
            <fileset dir="${src_gendir}" includes="**/*" />
        </delete>
        <ant antfile="${basedir}/java/javah.xml" target="clean" />
        <copy file="java/${src_exclude_filelist}" todir="${gendir}"
              preservelastmodified="yes" failonerror="yes" />
    </target>

    <!-- Determine whether or not our JUnit code is out-of-date because the filelist
         file has been updated -->
    <target name="check_test_uptodate" >
        <uptodate targetfile="${gendir}/${test_exclude_filelist}" srcfile="java/${test_exclude_filelist}"
                  property="test_uptodate" />
    </target>

    <!-- Remove all copied JUnit source for this module -->
    <target name="clean.test.filelist" depends="check_test_uptodate" unless="test_uptodate" >
        <echo message="java test source will be removed" />
        <delete quiet="true">
            <fileset dir="${test_gendir}" includes="**/*" />
        </delete>
        <copy file="java/${test_exclude_filelist}" todir="${gendir}"
              preservelastmodified="yes" failonerror="yes" />
    </target>

    <!-- Copy all required source files to our gen directory -->
    <target name="copy.source" depends="clean.source.filelist">
	<echo message="${gendir}/${src_exclude_filelist}" />
        <copy todir="${src_gendir}" preservelastmodified="yes" failonerror="yes">
            <fileset dir="java/src/${build.lib.MODULE}" excludesfile="${gendir}/${src_exclude_filelist}" />
        </copy>
    </target>

    <!-- Copy all required test files to our gen directory -->
    <target name="copy.test" depends="clean.test.filelist">
        <copy todir="${testsrc_gendir}" preservelastmodified="yes" failonerror="yes">
            <fileset dir="java/test/${build.lib.MODULE}" excludesfile="${gendir}/${test_exclude_filelist}" />
        </copy>
    </target>

    <!-- Compile Java sources to classfiles -->
    <target name="build.source" depends="mkdir, copy.source">

        <!-- check dependencies on already compiled OCAP source tree for any out-of-date
             sources and delete classes that have peripheral dependencies on out-of-date sources. -->
        <depend srcdir="${gendir}" destdir="${class_gendir}"
                cache="${gendir}/depcache" closure="yes">
            <patternset refid="all-java-source" />
        </depend>

        <!-- Compile the OCAP source -->
        <javac srcdir="${src_gendir}"
               destdir="${class_gendir}"
               includes="${build.lib.INCLUDES}"
               excludes="${build.lib.EXCLUDES}"
               debug="${build.lib.DEBUG}"
               optimize="${build.lib.OPTIMIZE}"
               deprecation="${build.lib.DEPRECATION}"
               target="${build.lib.TARGET}"
               source="${build.lib.SOURCE}"
               encoding="ISO-8859-1"
               includeantruntime="false">
            <classpath>
                <pathelement path="${class_gendir}" />
                <filelist dir="" files="${build.lib.CLASSPATH}"/>
            </classpath>
            <bootclasspath>
                <filelist dir="" files="${build.lib.BOOTCLASSPATH}" />
            </bootclasspath>
        </javac>
    </target>

    <!-- Compile JUnit sources to classfiles -->
    <target name="build.test" depends="mkdir, copy.test">

        <!-- check dependencies on already compiled OCAP source tree for any out-of-date
             sources and delete classes that have peripheral dependencies on out-of-date sources. -->
        <depend srcdir="${gendir}" destdir="${testclass_gendir}"
                cache="${gendir}/test_depcache" closure="yes">
            <patternset refid="all-java-source" />
            <patternset refid="all-test-source" />
        </depend>

        <!-- Compile the test source -->
        <javac srcdir="${testsrc_gendir}"
               destdir="${testclass_gendir}"
               includes="${build.test.INCLUDES}"
               excludes="${build.test.EXCLUDES}"
               debug="${build.test.DEBUG}"
               optimize="${build.test.OPTIMIZE}"
               deprecation="${build.test.DEPRECATION}"
               target="${build.test.TARGET}"
               source="${build.test.SOURCE}"
               encoding="ISO-8859-1"
               includeantruntime="false">
            <classpath>
                <pathelement path="${support.jar}" />
                <pathelement path="${class_gendir}" />
                <filelist dir="" files="${build.test.CLASSPATH}"/>
            </classpath>
            <bootclasspath>
                <filelist dir="" files="${build.test.BOOTCLASSPATH}"  />
            </bootclasspath>
        </javac>
    </target>

</project>
