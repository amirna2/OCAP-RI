#ifndef _SITP_PSI_H
#define _SITP_PSI_H 1

// COPYRIGHT_BEGIN
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
//  
//  Copyright (C) 2008-2013, Cable Television Laboratories, Inc. 
//  
//  This software is available under multiple licenses: 
//  
//  (1) BSD 2-clause 
//   Redistribution and use in source and binary forms, with or without modification, are
//   permitted provided that the following conditions are met:
//        ·Redistributions of source code must retain the above copyright notice, this list 
//             of conditions and the following disclaimer.
//        ·Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//             and the following disclaimer in the documentation and/or other materials provided with the 
//             distribution.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
//   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  (2) GPL Version 2
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, version 2. This program is distributed
//   in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//   PURPOSE. See the GNU General Public License for more details.
//  
//   You should have received a copy of the GNU General Public License along
//   with this program.If not, see<http:www.gnu.org/licenses/>.
//  
//  (3)CableLabs License
//   If you or the company you represent has a separate agreement with CableLabs
//   concerning the use of this code, your rights and obligations with respect
//   to this code shall be as set forth therein. No license is granted hereunder
//   for any other purpose.
//  
//   Please contact CableLabs if you need additional information or 
//   have any questions.
//  
//       CableLabs
//       858 Coal Creek Cir
//       Louisville, CO 80027-9750
//       303 661-9100
// COPYRIGHT_END

/*
 ******************************************************************************
 *                              Includes
 ******************************************************************************
 */

#ifdef __cplusplus
extern "C" {
#endif


/*
 *****************************************************************************
 * Include files for this component 
 *****************************************************************************
 */
#include <mpe_types.h>    /* Resolve basic type references. */
#include <mpe_error.h>    /* Resolve error type references. */
#include <mpe_os.h>       /* Resolve mem api references. */
#include <mpe_dbg.h>
#include <mpeos_media.h>  /* Resolve media  references. */
#include <mpeos_thread.h>
#include <mpeos_util.h>
#include <mpeos_filter.h>
#include <simgr.h>
#include <mpe_filter.h>
#include <mpe_filterevents.h>

/*
 *****************************************************************************
 *  global function prototypes (invoke by the outside world)
 *****************************************************************************
 */
mpe_Error   sitp_psi_Start(void) ;
mpe_Error   sitp_psi_ShutDown(void) ;
void        sitp_psi_EnablePSIPAcquisition(mpe_Bool flag) ; 
mpe_Bool        sitp_psi_AcquirePsip(void); 


/*
 ******************************************************************************
 *                               defines
 ******************************************************************************
 */

/* start with 16 for number of tables but will realloc if needed. */
#define MAX_SITP_TABLE_INFO_ARRAY_LENGTH  32
#define DEFAULT_SITP_TABLE_INFO_ARRAY_LENGTH  32

/* Follow the previous sitp debug statement model */
#define PSIMODULE                         "SITP_PSI"      

/* If this is not defined than assume only one tuner */
#ifndef MPE_NUM_TUNERS
#define MPE_NUM_TUNERS 1
#endif

/* Total physical tuners in the box plus one for OOB */
#define SITP_NUM_TUNERS                    MPE_NUM_TUNERS+1

/* Event to start the OOB table acquisition */
#define OOB_PSI_ACQUISITION               999

/* Event to shutdown the psi thread */
#define SITP_PSI_EVENT_SHUTDOWN           9999

/* Event to start the OOB table acquisition */
#define OOB_PSI_DISABLED               998

/* PSI OOB tuner number*/
#define SITP_PSI_OOB_TUNER                 0

/* Initial table version default value */
#define INIT_TABLE_VERSION                32

/* 
** index into the FilterSpec value array for the 
** version  number.
*/
#define PSI_VERSION_INDEX                5

/* The forever timer */
#define WAIT_FOREVER                     0
#define MAX_INIT_WAIT_TIMER              3000

/* Max active filer - default value to set the active filter array */
#define DEFAULT_ACTIVE_FILTER_ARRAY_SIZE   32
 

/* 
 * The short timer added to handle error conditions 
 * were other fsms need to be serviced. 
 */
#define SHORT_TIMER                      100

/* Size of the filter mask and value arrays */
#define MASK_VALS_SIZE                   6

/* 
 * CVCT table index in the sitp_psi_table_filter_info_t filter_info element of the fsm 
 * data structure
 */
#define CVCT_TABLE_INDEX                 1

/*
 * The OOB table array length only has one PAT and one PMT plus the CVCT
 */
#define MAX_OOB_TABLE_ARRAY_LENGTH       3

/*
 * The default Table info array length
 */
#define DEFAULT_TABLE_INFO_ARRAY_LENGTH  1


//*****************************************************************************
//                               enumerations
//*****************************************************************************

typedef enum _sitp_psi_state_e
{
   SITP_PSI_STATE_IDLE=0,
   SITP_PSI_STATE_WAIT_INIT_PAT,
   SITP_PSI_STATE_WAIT_INIT_PAT_RETRY,
   SITP_PSI_STATE_READY_INIT_PAT,
   SITP_PSI_STATE_WAIT_TABLE_REVISION,
   SITP_PSI_STATE_WAIT_INIT_PMT_RETRY,
   SITP_PSI_STATE_READY_TABLE_REVISION,
   SITP_PSI_STATE_WAIT_INIT_PMT,
   SITP_PSI_STATE_OOB_IDLE,
   SITP_PSI_STATE_OOB_WAIT_TABLE,
   SITP_PSI_STATE_NONE

} sitp_psi_state_e;

typedef enum _sitp_table_type_e
{
   TABLE_TYPE_PAT=0,
   TABLE_TYPE_PMT,
   TABLE_TYPE_NIT,
   TABLE_TYPE_SVCT,
   TABLE_TYPE_NTT,
   TABLE_TYPE_CVCT,
   TABLE_TYPE_NONE,
   TABLE_TYPE_UNKNOWN = TABLE_TYPE_NONE
} sitp_table_type_e;

/* SITP component return codes */
typedef enum _sitp_error_e
{
   SITP_SUCCESS=0,
   SITP_FAILURE,
   SITP_TUNER_PARAM_FAILURE,                  
   SITP_RESOURCE_FAILURE                  
} sitp_error_e;
//*****************************************************************************
//                              typedefs
//*****************************************************************************

/*
 ******************************************************************************
 * The information needed to set filters and get sections.
 ******************************************************************************
 */

typedef struct _sitp_psi_table_filter_info_t
{
   uint32_t versionNumber;
   sitp_table_type_e table_type;
   uint32_t pid;
   uint16_t program_number;
   mpe_Bool filter_set;
} sitp_psi_table_filter_info_t;

typedef struct _sitp_psi_tuner_info_t
{
   uint32_t frequency;
   uint32_t program_number;
   mpe_SiModulationMode modulation_mode;
   uint32_t transport_stream_id;
   uint32_t tuner;
   mpe_Bool tuned;
   uint32_t dsgAppId;

} sitp_psi_tuner_info_t;

typedef struct _sitp_psi_last_tune_info_t
{
   uint32_t frequency;
   uint32_t program_number;
   mpe_SiModulationMode modulation_mode;
   uint32_t cleanup_frequency;
   uint32_t cleanup_program_number;
   mpe_SiModulationMode cleanup_modulation_mode;

} sitp_psi_last_tune_info_t;

typedef struct _sitp_psi_active_filter_t
{
   uint32_t unique_id;
   sitp_table_type_e table_type;

} sitp_psi_active_filter_t;

typedef struct _sitp_psi_transport_stream_data_t
{
   sitp_psi_state_e ts_state;
   sitp_psi_active_filter_t *active_filter;
   sitp_psi_tuner_info_t tuner_info;
   sitp_psi_last_tune_info_t last_tune_info;
   uint32_t current_table_index;
   uint32_t table_length;
   sitp_psi_table_filter_info_t *filter_info;

} sitp_psi_transport_stream_data_t;

/*
 ******************************************************************************
 *                               Globals
 ******************************************************************************
 */

/* End Setup of mpe_FitlerSpec */

/*
 ******************************************************************************
 *                               Public functions
 ******************************************************************************
 */
mpe_Error add_pmt_entry(sitp_psi_transport_stream_data_t* fsm_data, 
      uint32_t index, 
      uint16_t program_number,
      uint16_t program_map_pid,
      uint16_t version);
mpe_Error set_pmt_version(sitp_psi_table_filter_info_t * filter_table_array, uint32_t program_number, uint16_t version);
mpe_Error add_pat_entry(sitp_psi_table_filter_info_t * filter_table_array, uint16_t version);
mpe_Error add_cvct_entry(sitp_psi_table_filter_info_t * filter_table_array, uint16_t version);
mpe_Error print_filter_table_entries( sitp_psi_transport_stream_data_t * fsm_data );
void printTunerStates(void);

mpe_Error tune_initiated(mpe_MediaTuneRequestParams *tuneRequest);
mpe_Error attachDSGTunnel(uint32_t appID);
mpe_Error detachDSGTunnel(uint32_t appID);

#ifdef __cplusplus
} ;
#endif

#endif /* _SITP_PSI_H */

